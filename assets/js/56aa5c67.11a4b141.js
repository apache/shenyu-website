"use strict";(self.webpackChunkshenyu_website=self.webpackChunkshenyu_website||[]).push([[36577],{15680:(e,t,r)=>{r.d(t,{xA:()=>c,yg:()=>g});var n=r(96540);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function p(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function o(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var s=n.createContext({}),l=function(e){var t=n.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):p(p({},t),e)),r},c=function(e){var t=l(e.components);return n.createElement(s.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},h=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,i=e.originalType,s=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),u=l(r),h=a,g=u["".concat(s,".").concat(h)]||u[h]||d[h]||i;return r?n.createElement(g,p(p({ref:t},c),{},{components:r})):n.createElement(g,p({ref:t},c))}));function g(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=r.length,p=new Array(i);p[0]=h;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o[u]="string"==typeof e?e:a,p[1]=o;for(var l=2;l<i;l++)p[l]=r[l];return n.createElement.apply(null,p)}return n.createElement.apply(null,r)}h.displayName="MDXCreateElement"},56096:(e,t,r)=>{r.r(t),r.d(t,{contentTitle:()=>p,default:()=>u,frontMatter:()=>i,metadata:()=>o,toc:()=>s});var n=r(58168),a=(r(96540),r(15680));const i={title:"Quick start with http",description:"Quick start with http"},p=void 0,o={unversionedId:"quick-start/quick-start-http",id:"version-2.3.0-Legacy/quick-start/quick-start-http",isDocsHomePage:!1,title:"Quick start with http",description:"Quick start with http",source:"@site/versioned_docs/version-2.3.0-Legacy/quick-start/quick-start-http.md",sourceDirName:"quick-start",slug:"/quick-start/quick-start-http",permalink:"/docs/2.3.0-Legacy/quick-start/quick-start-http",editUrl:"https://github.com/apache/shenyu-website/edit/main/versioned_docs/version-2.3.0-Legacy/quick-start/quick-start-http.md",version:"2.3.0-Legacy",frontMatter:{title:"Quick start with http",description:"Quick start with http"},sidebar:"version-2.3.0-Legacy/tutorialSidebar",previous:{title:"Quick start with grpc",permalink:"/docs/2.3.0-Legacy/quick-start/quick-start-grpc"},next:{title:"Quick start with sofa",permalink:"/docs/2.3.0-Legacy/quick-start/quick-start-sofa"}},s=[{value:"Environment to prepare",id:"environment-to-prepare",children:[]},{value:"Run the soul-examples-http project",id:"run-the-soul-examples-http-project",children:[]},{value:"Enable the Divide plugin to handle HTTP requests",id:"enable-the-divide-plugin-to-handle-http-requests",children:[]},{value:"Testing http request",id:"testing-http-request",children:[]}],l={toc:s},c="wrapper";function u(e){let{components:t,...i}=e;return(0,a.yg)(c,(0,n.A)({},l,i,{components:t,mdxType:"MDXLayout"}),(0,a.yg)("p",null,"This document introduces how to quickly access the Soul Gateway using Http. You can get the code example of this document by clicking ",(0,a.yg)("a",{parentName:"p",href:"https://github.com/dromara/soul/tree/2.3.0/soul-examples/soul-examples-http"},"here"),"."),(0,a.yg)("h2",{id:"environment-to-prepare"},"Environment to prepare"),(0,a.yg)("p",null,"Please refer to the ",(0,a.yg)("a",{parentName:"p",href:"../users-guide/soul-set-up"},"setup")," and launch ",(0,a.yg)("inlineCode",{parentName:"p"},"soul-admin")," and ",(0,a.yg)("inlineCode",{parentName:"p"},"soul-bootstrap"),"."),(0,a.yg)("p",null,"Introducing gateway to HTTP proxy plugin"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},"Add the following dependencies to the ",(0,a.yg)("inlineCode",{parentName:"li"},"soul-bootstrap"),"'s ",(0,a.yg)("inlineCode",{parentName:"li"},"pom.xml")," file:")),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-xml"},"\x3c!--if you use http proxy start this--\x3e\n<dependency>\n    <groupId>org.dromara</groupId>\n    <artifactId>soul-spring-boot-starter-plugin-divide</artifactId>\n    <version>${last.version}</version>\n</dependency>\n\n<dependency>\n    <groupId>org.dromara</groupId>\n    <artifactId>soul-spring-boot-starter-plugin-httpclient</artifactId>\n    <version>${last.version}</version>\n</dependency>\n")),(0,a.yg)("h2",{id:"run-the-soul-examples-http-project"},"Run the soul-examples-http project"),(0,a.yg)("p",null,"Download",(0,a.yg)("a",{parentName:"p",href:"https://github.com/dromara/soul/tree/2.3.0/soul-examples/soul-examples-http"},"soul-examples-http")),(0,a.yg)("p",null,"Execute the ",(0,a.yg)("inlineCode",{parentName:"p"},"org.dromara.soul.examples.http.SoulTestHttpApplication")," main method to start project."),(0,a.yg)("p",null,"The following log appears when the startup is successful:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-shell"},'2021-02-10 00:57:07.561  INFO 3700 --- [pool-1-thread-1] o.d.s.client.common.utils.RegisterUtils  : http client register success: {"appName":"http","context":"/http","path":"/http/test/**","pathDesc":"","rpcType":"http","host":"192.168.50.13","port":8188,"ruleName":"/http/test/**","enabled":true,"registerMetaData":false} \n2021-02-10 00:57:07.577  INFO 3700 --- [pool-1-thread-1] o.d.s.client.common.utils.RegisterUtils  : http client register success: {"appName":"http","context":"/http","path":"/http/order/save","pathDesc":"Save order","rpcType":"http","host":"192.168.50.13","port":8188,"ruleName":"/http/order/save","enabled":true,"registerMetaData":false} \n2021-02-10 00:57:07.587  INFO 3700 --- [pool-1-thread-1] o.d.s.client.common.utils.RegisterUtils  : http client register success: {"appName":"http","context":"/http","path":"/http/order/path/**/name","pathDesc":"","rpcType":"http","host":"192.168.50.13","port":8188,"ruleName":"/http/order/path/**/name","enabled":true,"registerMetaData":false} \n2021-02-10 00:57:07.596  INFO 3700 --- [pool-1-thread-1] o.d.s.client.common.utils.RegisterUtils  : http client register success: {"appName":"http","context":"/http","path":"/http/order/findById","pathDesc":"Find by id","rpcType":"http","host":"192.168.50.13","port":8188,"ruleName":"/http/order/findById","enabled":true,"registerMetaData":false} \n2021-02-10 00:57:07.606  INFO 3700 --- [pool-1-thread-1] o.d.s.client.common.utils.RegisterUtils  : http client register success: {"appName":"http","context":"/http","path":"/http/order/path/**","pathDesc":"","rpcType":"http","host":"192.168.50.13","port":8188,"ruleName":"/http/order/path/**","enabled":true,"registerMetaData":false} \n2021-02-10 00:57:08.023  INFO 3700 --- [           main] o.s.b.web.embedded.netty.NettyWebServer  : Netty started on port(s): 8188\n2021-02-10 00:57:08.026  INFO 3700 --- [           main] o.d.s.e.http.SoulTestHttpApplication     : Started SoulTestHttpApplication in 2.555 seconds (JVM running for 3.411) \n')),(0,a.yg)("h2",{id:"enable-the-divide-plugin-to-handle-http-requests"},"Enable the Divide plugin to handle HTTP requests"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},"enabled the ",(0,a.yg)("inlineCode",{parentName:"li"},"divide")," plugin in the ",(0,a.yg)("inlineCode",{parentName:"li"},"soul-admin")," plugin management.")),(0,a.yg)("h2",{id:"testing-http-request"},"Testing http request"),(0,a.yg)("p",null,"The ",(0,a.yg)("inlineCode",{parentName:"p"},"soul-examples-http")," project will automatically register interface methods annotated with ",(0,a.yg)("inlineCode",{parentName:"p"},"@SoulSpringMvcClient")," in the soul gateway after successful startup."),(0,a.yg)("p",null,"Open Plugin Management -> divide to see the list of plugin rule configurations"),(0,a.yg)("p",null,(0,a.yg)("img",{src:r(70835).A})),(0,a.yg)("p",null,"Use PostMan to simulate HTTP to request your http service"),(0,a.yg)("p",null,(0,a.yg)("img",{src:r(49033).A})))}u.isMDXComponent=!0},49033:(e,t,r)=>{r.d(t,{A:()=>n});const n=r.p+"assets/images/postman-test-ffc28736280dc05a51162a4db2a0a7df.png"},70835:(e,t,r)=>{r.d(t,{A:()=>n});const n=r.p+"assets/images/rule-list-44d335cb7d35496ced765ebf3751ac55.png"}}]);