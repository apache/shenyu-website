"use strict";(self.webpackChunkshenyu_website=self.webpackChunkshenyu_website||[]).push([[81019],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>f});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),p=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=p(e.components);return r.createElement(l.Provider,{value:t},e.children)},m="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),m=p(n),d=a,f=m["".concat(l,".").concat(d)]||m[d]||u[d]||o;return n?r.createElement(f,i(i({ref:t},c),{},{components:n})):r.createElement(f,i({ref:t},c))}));function f(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=d;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[m]="string"==typeof e?e:a,i[1]=s;for(var p=2;p<o;p++)i[p]=n[p];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},10681:(e,t,n)=>{n.r(t),n.d(t,{contentTitle:()=>i,default:()=>m,frontMatter:()=>o,metadata:()=>s,toc:()=>l});var r=n(87462),a=(n(67294),n(3905));const o={title:"Custom Mock Data Generator",keywords:["Mock"],description:"custom mock data generator"},i=void 0,s={unversionedId:"developer/spi/custom-mock-generator",id:"version-2.6.1/developer/spi/custom-mock-generator",isDocsHomePage:!1,title:"Custom Mock Data Generator",description:"custom mock data generator",source:"@site/versioned_docs/version-2.6.1/developer/spi/custom-mock-generator.md",sourceDirName:"developer/spi",slug:"/developer/spi/custom-mock-generator",permalink:"/docs/developer/spi/custom-mock-generator",editUrl:"https://github.com/apache/shenyu-website/edit/main/versioned_docs/version-2.6.1/developer/spi/custom-mock-generator.md",version:"2.6.1",frontMatter:{title:"Custom Mock Data Generator",keywords:["Mock"],description:"custom mock data generator"},sidebar:"version-2.6.0/tutorialSidebar",previous:{title:"Custom Metrics Monitor",permalink:"/docs/developer/spi/custom-metrics-monitor"},next:{title:"Custom Parameter Data",permalink:"/docs/developer/spi/custom-parameter-data"}},l=[{value:"Explanation",id:"explanation",children:[]},{value:"Extension",id:"extension",children:[]}],p={toc:l},c="wrapper";function m(e){let{components:t,...n}=e;return(0,a.kt)(c,(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h2",{id:"explanation"},"Explanation"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"This article describes how to make custom extensions to ",(0,a.kt)("inlineCode",{parentName:"li"},"org.apache.shenyu.plugin.mock.generator.Generator"),"."),(0,a.kt)("li",{parentName:"ol"},"The mock data generation expression needs to satisfy the format of ",(0,a.kt)("inlineCode",{parentName:"li"},"${name|param1|param2|...}"))),(0,a.kt)("h2",{id:"extension"},"Extension"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Create a new project and introduce the following dependencies:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-xml"},"<dependencies>\n    <dependency>\n        <groupId>org.apache.shenyu</groupId>\n        <artifactId>shenyu-plugin-mock</artifactId>\n        <version>${project.version}</version>\n    </dependency>\n</dependencies>\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Create a new class  ",(0,a.kt)("inlineCode",{parentName:"li"},"CustomerGenerator"),"\uff0cimplements ",(0,a.kt)("inlineCode",{parentName:"li"},"org.apache.shenyu.plugin.mock.generator.Generator"),"\u3002")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},"@Join\npublic class CustomGenerator implements Generator<String> {\n    @Override\n    public String getName() {\n        // The name of the generator, i.e. the content before the first | of the expression\n    }\n    \n    @Override\n    public String generate() {\n        // Implement the logic of data generation\n    }\n    \n    @Override\n    public int getParamSize() {\n        // The number of required parameters of the expression\n    }\n    \n    @Override\n    public void initParam(List params, String rule) {\n        // params is the contents except the name after the expression is split according to |\n        // rule is the content of the original expression , if there is a custom parameter processing logic, you can use this parameter\n    }\n    \n    @Override\n    public boolean match(String rule) {\n        // Check if the current expression is valid\n    }\n    \n    @Override\n    public String[] getPrefixAndSuffix() {\n        // Return the prefix and suffix added after the generated content, please return a string array with two elements\n        // 0th element is the prefix, 1st element is the suffix\n    }\n}\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"In the project  ",(0,a.kt)("inlineCode",{parentName:"li"},"resources")," directory\uff0cCreate a new ",(0,a.kt)("inlineCode",{parentName:"li"},"META-INF/shenyu")," directory\uff0c and the new file name is : ",(0,a.kt)("inlineCode",{parentName:"li"},"org.apache.shenyu.plugin.mock.generator.Generator"),".\nadd ",(0,a.kt)("inlineCode",{parentName:"li"},"${you spi name}")," = ",(0,a.kt)("inlineCode",{parentName:"li"},"${you class path}"),":")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell",metastring:'title="script"',title:'"script"'},"${spi name}=${custom class path}\n")),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"${spi name}")," represents the name of ",(0,a.kt)("inlineCode",{parentName:"p"},"spi"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"${spi name }")," needs to be consistent with the definition of the getName() method in the Generator implementation class, ",(0,a.kt)("inlineCode",{parentName:"p"},"${custom class path}")," represents the fully qualified name of the class. for example:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell",metastring:'title="script"',title:'"script"'},"custom=xxx.xxx.xxx.CustomGenerator\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Package the project and copy it to the ",(0,a.kt)("inlineCode",{parentName:"li"},"lib")," or ",(0,a.kt)("inlineCode",{parentName:"li"},"ext-lib")," directory of the gateway (bootstrap-bin).")))}m.isMDXComponent=!0}}]);