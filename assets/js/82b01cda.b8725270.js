"use strict";(self.webpackChunkshenyu_website=self.webpackChunkshenyu_website||[]).push([[86602],{15680:(e,n,a)=>{a.d(n,{xA:()=>c,yg:()=>h});var t=a(96540);function i(e,n,a){return n in e?Object.defineProperty(e,n,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[n]=a,e}function o(e,n){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter(function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable})),a.push.apply(a,t)}return a}function r(e){for(var n=1;n<arguments.length;n++){var a=null!=arguments[n]?arguments[n]:{};n%2?o(Object(a),!0).forEach(function(n){i(e,n,a[n])}):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach(function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(a,n))})}return e}function l(e,n){if(null==e)return{};var a,t,i=function(e,n){if(null==e)return{};var a,t,i={},o=Object.keys(e);for(t=0;t<o.length;t++)a=o[t],n.indexOf(a)>=0||(i[a]=e[a]);return i}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(t=0;t<o.length;t++)a=o[t],n.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(i[a]=e[a])}return i}var s=t.createContext({}),p=function(e){var n=t.useContext(s),a=n;return e&&(a="function"==typeof e?e(n):r(r({},n),e)),a},c=function(e){var n=p(e.components);return t.createElement(s.Provider,{value:n},e.children)},d="mdxType",g={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},u=t.forwardRef(function(e,n){var a=e.components,i=e.mdxType,o=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),d=p(a),u=i,h=d["".concat(s,".").concat(u)]||d[u]||g[u]||o;return a?t.createElement(h,r(r({ref:n},c),{},{components:a})):t.createElement(h,r({ref:n},c))});function h(e,n){var a=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var o=a.length,r=new Array(o);r[0]=u;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l[d]="string"==typeof e?e:i,r[1]=l;for(var p=2;p<o;p++)r[p]=a[p];return t.createElement.apply(null,r)}return t.createElement.apply(null,a)}u.displayName="MDXCreateElement"},22159:(e,n,a)=>{a.d(n,{A:()=>t});const t=a.p+"assets/images/handler-selector-bf05b8fdf80a428aa53606178a42bae6.png"},31476:(e,n,a)=>{a.d(n,{A:()=>t});const t=a.p+"assets/images/update-selector-en-4efb58e488bd424a54213d31929d7eb1.png"},48762:(e,n,a)=>{a.d(n,{A:()=>t});const t=a.p+"assets/images/zk-sync-sequence-admin-en-ae0fe50fed54ce6e1d66a9a0ca5ff6b7.png"},52288:(e,n,a)=>{a.r(n),a.d(n,{contentTitle:()=>r,default:()=>d,frontMatter:()=>o,metadata:()=>l,toc:()=>s});var t=a(58168),i=(a(96540),a(15680));const o={title:"ZooKeeper Data Synchronization Source Code Analysis",author:"midnight2104",author_title:"Apache ShenYu Committer",author_url:"https://github.com/midnight2104",tags:["zookeeper","data sync","Apache ShenYu"]},r=void 0,l={permalink:"/blog/DataSync-SourceCode-Analysis-ZooKeeper-Data-Sync",editUrl:"https://github.com/apache/shenyu-website/edit/main/blog/DataSync-SourceCode-Analysis-ZooKeeper-Data-Sync.md",source:"@site/blog/DataSync-SourceCode-Analysis-ZooKeeper-Data-Sync.md",title:"ZooKeeper Data Synchronization Source Code Analysis",description:"Apache ShenYu is an asynchronous, high-performance, cross-language, responsive API gateway.",date:"2025-09-05T09:41:40.032Z",formattedDate:"September 5, 2025",tags:[{label:"zookeeper",permalink:"/blog/tags/zookeeper"},{label:"data sync",permalink:"/blog/tags/data-sync"},{label:"Apache ShenYu",permalink:"/blog/tags/apache-shen-yu"}],readingTime:17.96,truncated:!1,prevItem:{title:"Nacos Data Synchronization Source Code Analysis",permalink:"/blog/DataSync-SourceCode-Analysis-Nacos-Data-Sync"},nextItem:{title:"E2e Test Analysis",permalink:"/blog/E2eTest-Analysis"}},s=[{value:"1. About ZooKeeper",id:"1-about-zookeeper",children:[]},{value:"2. Admin Data Sync",id:"2-admin-data-sync",children:[]},{value:"3. Gateway Data Sync",id:"3-gateway-data-sync",children:[]},{value:"4. Admin Data Sync  initialization",id:"4-admin-data-sync--initialization",children:[]},{value:"5. Gateway Data Sync Init",id:"5-gateway-data-sync-init",children:[]},{value:"6. Summary",id:"6-summary",children:[]}],p={toc:s},c="wrapper";function d({components:e,...n}){return(0,i.yg)(c,(0,t.A)({},p,n,{components:e,mdxType:"MDXLayout"}),(0,i.yg)("blockquote",null,(0,i.yg)("p",{parentName:"blockquote"},(0,i.yg)("a",{parentName:"p",href:"https://shenyu.apache.org/zh/docs/index"},"Apache ShenYu")," is an asynchronous, high-performance, cross-language, responsive API gateway.")),(0,i.yg)("p",null,"In ",(0,i.yg)("inlineCode",{parentName:"p"},"ShenYu")," gateway, data synchronization refers to how to synchronize the updated data to the gateway after the data is sent in the background management system. The Apache ShenYu gateway currently supports data synchronization for ",(0,i.yg)("inlineCode",{parentName:"p"},"ZooKeeper"),", ",(0,i.yg)("inlineCode",{parentName:"p"},"WebSocket"),", ",(0,i.yg)("inlineCode",{parentName:"p"},"http long poll"),", ",(0,i.yg)("inlineCode",{parentName:"p"},"Nacos"),", ",(0,i.yg)("inlineCode",{parentName:"p"},"etcd")," and ",(0,i.yg)("inlineCode",{parentName:"p"},"Consul"),". The main content of this article is based on ",(0,i.yg)("inlineCode",{parentName:"p"},"WebSocket")," data synchronization source code analysis."),(0,i.yg)("blockquote",null,(0,i.yg)("p",{parentName:"blockquote"},"This paper based on ",(0,i.yg)("inlineCode",{parentName:"p"},"shenyu-2.4.0")," version of the source code analysis, the official website of the introduction of please refer to the ",(0,i.yg)("a",{parentName:"p",href:"https://shenyu.apache.org/docs/design/data-sync/"},"Data Synchronization Design")," .")),(0,i.yg)("h3",{id:"1-about-zookeeper"},"1. About ZooKeeper"),(0,i.yg)("p",null,"Apache ZooKeeper is a software project of the Apache Software Foundation that provides open source distributed configuration services, synchronization services, and naming registries for large-scale distributed computing. ZooKeeper nodes store their data in a hierarchical namespace, much like a file system or a prefix tree structure. Clients can read and write on nodes and thus have a shared configuration service in this way."),(0,i.yg)("h3",{id:"2-admin-data-sync"},"2. Admin Data Sync"),(0,i.yg)("p",null,"We traced the source code from a real case, such as updating a selector data in the ",(0,i.yg)("inlineCode",{parentName:"p"},"Divide")," plugin to a weight of 90 in a background administration system:"),(0,i.yg)("p",null,(0,i.yg)("img",{src:a(31476).A})),(0,i.yg)("h4",{id:"21-accept-data"},"2.1 Accept Data"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"SelectorController.createSelector()")),(0,i.yg)("p",null,"Enter the createSelector() method of the ",(0,i.yg)("inlineCode",{parentName:"p"},"SelectorController")," class, which validates data, adds or updates data, and returns results."),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-java"},'@Validated\n@RequiredArgsConstructor\n@RestController\n@RequestMapping("/selector")\npublic class SelectorController {\n    \n    @PutMapping("/{id}")\n    public ShenyuAdminResult updateSelector(@PathVariable("id") final String id, @Valid @RequestBody final SelectorDTO selectorDTO) {\n        // set the current selector data ID\n        selectorDTO.setId(id);\n        // create or update operation\n        Integer updateCount = selectorService.createOrUpdate(selectorDTO);\n        // return result \n        return ShenyuAdminResult.success(ShenyuResultMessage.UPDATE_SUCCESS, updateCount);\n    }\n    \n    // ......\n}\n')),(0,i.yg)("h4",{id:"22-handle-data"},"2.2 Handle Data"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"SelectorServiceImpl.createOrUpdate()")),(0,i.yg)("p",null,"Convert data in the ",(0,i.yg)("inlineCode",{parentName:"p"},"SelectorServiceImpl")," class using the ",(0,i.yg)("inlineCode",{parentName:"p"},"createOrUpdate()")," method, save it to the database, publish the event, update ",(0,i.yg)("inlineCode",{parentName:"p"},"upstream"),"."),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-java"},"@RequiredArgsConstructor\n@Service\npublic class SelectorServiceImpl implements SelectorService {\n    // eventPublisher\n    private final ApplicationEventPublisher eventPublisher;\n    \n    @Override\n    @Transactional(rollbackFor = Exception.class)\n    public int createOrUpdate(final SelectorDTO selectorDTO) {\n        int selectorCount;\n        // build data DTO --\x3e DO\n        SelectorDO selectorDO = SelectorDO.buildSelectorDO(selectorDTO);\n        List<SelectorConditionDTO> selectorConditionDTOs = selectorDTO.getSelectorConditions();\n        // insert or update ?\n        if (StringUtils.isEmpty(selectorDTO.getId())) {\n            //  insert into data\n            selectorCount = selectorMapper.insertSelective(selectorDO);\n            // insert into condition data\n            selectorConditionDTOs.forEach(selectorConditionDTO -> {\n                selectorConditionDTO.setSelectorId(selectorDO.getId());\n                selectorConditionMapper.insertSelective(SelectorConditionDO.buildSelectorConditionDO(selectorConditionDTO));\n            });\n            // check selector add\n            if (dataPermissionMapper.listByUserId(JwtUtils.getUserInfo().getUserId()).size() > 0) {\n                DataPermissionDTO dataPermissionDTO = new DataPermissionDTO();\n                dataPermissionDTO.setUserId(JwtUtils.getUserInfo().getUserId());\n                dataPermissionDTO.setDataId(selectorDO.getId());\n                dataPermissionDTO.setDataType(AdminConstants.SELECTOR_DATA_TYPE);\n                dataPermissionMapper.insertSelective(DataPermissionDO.buildPermissionDO(dataPermissionDTO));\n            }\n\n        } else {\n            // update data, delete and then insert\n            selectorCount = selectorMapper.updateSelective(selectorDO);\n            //delete rule condition then add\n            selectorConditionMapper.deleteByQuery(new SelectorConditionQuery(selectorDO.getId()));\n            selectorConditionDTOs.forEach(selectorConditionDTO -> {\n                selectorConditionDTO.setSelectorId(selectorDO.getId());\n                SelectorConditionDO selectorConditionDO = SelectorConditionDO.buildSelectorConditionDO(selectorConditionDTO);\n                selectorConditionMapper.insertSelective(selectorConditionDO);\n            });\n        }\n        // publish event\n        publishEvent(selectorDO, selectorConditionDTOs);\n\n        // update upstream\n        updateDivideUpstream(selectorDO);\n        return selectorCount;\n    }\n    \n    // ......\n    \n}\n")),(0,i.yg)("p",null,"In the ",(0,i.yg)("inlineCode",{parentName:"p"},"Service")," class to persist data, i.e. to the database, this should be familiar, not expand. The update upstream operation is analyzed in the corresponding section below, focusing on the publish event operation, which performs data synchronization."),(0,i.yg)("p",null,"The logic of the ",(0,i.yg)("inlineCode",{parentName:"p"},"publishEvent()"),"  method is to find the plugin corresponding to the selector, build the conditional data, and publish the change data."),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-java"},"       private void publishEvent(final SelectorDO selectorDO, final List<SelectorConditionDTO> selectorConditionDTOs) {\n        // find plugin of selector\n        PluginDO pluginDO = pluginMapper.selectById(selectorDO.getPluginId());\n        // build condition data\n        List<ConditionData> conditionDataList =                selectorConditionDTOs.stream().map(ConditionTransfer.INSTANCE::mapToSelectorDTO).collect(Collectors.toList());\n        // publish event\n        eventPublisher.publishEvent(new DataChangedEvent(ConfigGroupEnum.SELECTOR, DataEventTypeEnum.UPDATE,\n                Collections.singletonList(SelectorDO.transFrom(selectorDO, pluginDO.getName(), conditionDataList))));\n    }\n")),(0,i.yg)("p",null,"Change data released by ",(0,i.yg)("inlineCode",{parentName:"p"},"eventPublisher.PublishEvent()")," is complete, the ",(0,i.yg)("inlineCode",{parentName:"p"},"eventPublisher")," object is a ",(0,i.yg)("inlineCode",{parentName:"p"},"ApplicationEventPublisher")," class, The fully qualified class name is ",(0,i.yg)("inlineCode",{parentName:"p"},"org.springframework.context.ApplicationEventPublisher"),". Here we see that publishing data is done through ",(0,i.yg)("inlineCode",{parentName:"p"},"Spring")," related functionality."),(0,i.yg)("blockquote",null,(0,i.yg)("p",{parentName:"blockquote"},(0,i.yg)("inlineCode",{parentName:"p"},"ApplicationEventPublisher"),"\uff1a"),(0,i.yg)("p",{parentName:"blockquote"},"When a state change, the publisher calls ",(0,i.yg)("inlineCode",{parentName:"p"},"ApplicationEventPublisher")," of ",(0,i.yg)("inlineCode",{parentName:"p"},"publishEvent")," method to release an event, ",(0,i.yg)("inlineCode",{parentName:"p"},"Spring")," container broadcast event for all observers, The observer's ",(0,i.yg)("inlineCode",{parentName:"p"},"onApplicationEvent")," method is called to pass the event object to the observer. There are two ways to call ",(0,i.yg)("inlineCode",{parentName:"p"},"publishEvent")," method, one is to implement the interface by the container injection ",(0,i.yg)("inlineCode",{parentName:"p"},"ApplicationEventPublisher")," object and then call the method, the other is a direct call container, the method of two methods of publishing events not too big difference."),(0,i.yg)("ul",{parentName:"blockquote"},(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("inlineCode",{parentName:"li"},"ApplicationEventPublisher"),": publish event;"),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("inlineCode",{parentName:"li"},"ApplicationEvent"),": ",(0,i.yg)("inlineCode",{parentName:"li"},"Spring")," event, record the event source, time, and data;"),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("inlineCode",{parentName:"li"},"ApplicationListener"),": event listener, observer."))),(0,i.yg)("p",null,"In Spring event publishing mechanism, there are three objects,"),(0,i.yg)("p",null,"An object is a publish event ",(0,i.yg)("inlineCode",{parentName:"p"},"ApplicationEventPublisher"),", in ",(0,i.yg)("inlineCode",{parentName:"p"},"ShenYu")," through the constructor in the injected a ",(0,i.yg)("inlineCode",{parentName:"p"},"eventPublisher"),"."),(0,i.yg)("p",null,"The other object is ",(0,i.yg)("inlineCode",{parentName:"p"},"ApplicationEvent")," , inherited from ",(0,i.yg)("inlineCode",{parentName:"p"},"ShenYu")," through ",(0,i.yg)("inlineCode",{parentName:"p"},"DataChangedEvent"),", representing the event object."),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-java"},"public class DataChangedEvent extends ApplicationEvent {\n//......\n}\n")),(0,i.yg)("p",null,"The last object is ",(0,i.yg)("inlineCode",{parentName:"p"},"ApplicationListener")," in ",(0,i.yg)("inlineCode",{parentName:"p"},"ShenYu")," in through ",(0,i.yg)("inlineCode",{parentName:"p"},"DataChangedEventDispatcher")," class implements this interface, as the event listener, responsible for handling the event object."),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-java"},"@Component\npublic class DataChangedEventDispatcher implements ApplicationListener<DataChangedEvent>, InitializingBean {\n\n    //......\n    \n}\n")),(0,i.yg)("h4",{id:"23-dispatch-data"},"2.3 Dispatch Data"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"DataChangedEventDispatcher.onApplicationEvent()")),(0,i.yg)("p",null,"Released when the event is completed, will automatically enter the ",(0,i.yg)("inlineCode",{parentName:"p"},"DataChangedEventDispatcher")," class ",(0,i.yg)("inlineCode",{parentName:"p"},"onApplicationEvent()")," method of handling events."),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-java"},'@Component\npublic class DataChangedEventDispatcher implements ApplicationListener<DataChangedEvent>, InitializingBean {\n\n  /**\n     * This method is called when there are data changes\n   * @param event\n     */\n    @Override\n    @SuppressWarnings("unchecked")\n    public void onApplicationEvent(final DataChangedEvent event) {\n        // Iterate through the data change listener (usually using a data synchronization approach is fine)\n      for (DataChangedListener listener : listeners) {\n            // What kind of data has changed\n        switch (event.getGroupKey()) {\n                case APP_AUTH: // app auth data\n                    listener.onAppAuthChanged((List<AppAuthData>) event.getSource(), event.getEventType());\n                    break;\n                case PLUGIN:  // plugin data\n                    listener.onPluginChanged((List<PluginData>) event.getSource(), event.getEventType());\n                    break;\n                case RULE:    // rule data\n                    listener.onRuleChanged((List<RuleData>) event.getSource(), event.getEventType());\n                    break;\n                case SELECTOR:   // selector data\n                    listener.onSelectorChanged((List<SelectorData>) event.getSource(), event.getEventType());\n                    break;\n                case META_DATA:  // metadata\n                    listener.onMetaDataChanged((List<MetaData>) event.getSource(), event.getEventType());\n                    break;\n                default:  // other types throw exception\n                  throw new IllegalStateException("Unexpected value: " + event.getGroupKey());\n            }\n        }\n    }\n    \n}\n')),(0,i.yg)("p",null,"When there is a data change, the ",(0,i.yg)("inlineCode",{parentName:"p"},"onApplicationEvent")," method is called and all the data change listeners are iterated to determine the data type and handed over to the appropriate data listener for processing."),(0,i.yg)("p",null,"ShenYu groups all the data into five categories: ",(0,i.yg)("inlineCode",{parentName:"p"},"APP_AUTH"),", ",(0,i.yg)("inlineCode",{parentName:"p"},"PLUGIN"),", ",(0,i.yg)("inlineCode",{parentName:"p"},"RULE"),", ",(0,i.yg)("inlineCode",{parentName:"p"},"SELECTOR")," and ",(0,i.yg)("inlineCode",{parentName:"p"},"META_DATA"),"."),(0,i.yg)("p",null,"Here the data change listener (",(0,i.yg)("inlineCode",{parentName:"p"},"DataChangedListener"),") is an abstraction of the data synchronization policy. Its concrete implementation is:"),(0,i.yg)("p",null,(0,i.yg)("img",{src:a(85505).A})),(0,i.yg)("p",null,"These implementation classes are the synchronization strategies currently supported by ShenYu:"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("inlineCode",{parentName:"li"},"WebsocketDataChangedListener"),": data synchronization based on Websocket;"),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("inlineCode",{parentName:"li"},"ZookeeperDataChangedListener"),":data synchronization based on Zookeeper;"),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("inlineCode",{parentName:"li"},"ConsulDataChangedListener"),": data synchronization based on Consul;"),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("inlineCode",{parentName:"li"},"EtcdDataDataChangedListener"),"\uff1adata synchronization based on etcd;"),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("inlineCode",{parentName:"li"},"HttpLongPollingDataChangedListener"),"\uff1adata synchronization based on http long polling;"),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("inlineCode",{parentName:"li"},"NacosDataChangedListener"),"\uff1adata synchronization based on nacos;")),(0,i.yg)("p",null,"Given that there are so many implementation strategies, how do you decide which to use?"),(0,i.yg)("p",null,"Because this paper is based on ",(0,i.yg)("inlineCode",{parentName:"p"},"zookeeper")," data synchronization source code analysis, so here to ",(0,i.yg)("inlineCode",{parentName:"p"},"ZookeeperDataChangedListener")," as an example, the analysis of how it is loaded and implemented."),(0,i.yg)("p",null,"A global search in the source code project shows that its implementation is done in the ",(0,i.yg)("inlineCode",{parentName:"p"},"DataSyncConfiguration")," class."),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-java"},'/**\n * Data Sync Configuration\n * By springboot conditional assembly\n * The type Data sync configuration.\n */\n@Configuration\npublic class DataSyncConfiguration {\n    \n    \n    /**\n     * zookeeper data sunc\n     * The type Zookeeper listener.\n     */\n    @Configuration\n    @ConditionalOnProperty(prefix = "shenyu.sync.zookeeper", name = "url")  // The condition property is loaded only when it is met\n    @Import(ZookeeperConfiguration.class)\n    static class ZookeeperListener {\n\n        /**\n         * Config event listener data changed listener.\n         * @param zkClient the zk client\n         * @return the data changed listener\n         */\n        @Bean\n        @ConditionalOnMissingBean(ZookeeperDataChangedListener.class)\n        public DataChangedListener zookeeperDataChangedListener(final ZkClient zkClient) {\n            return new ZookeeperDataChangedListener(zkClient);\n        }\n\n        /**\n         * Zookeeper data init zookeeper data init.\n         * @param zkClient        the zk client\n         * @param syncDataService the sync data service\n         * @return the zookeeper data init\n         */\n        @Bean\n        @ConditionalOnMissingBean(ZookeeperDataInit.class)\n        public ZookeeperDataInit zookeeperDataInit(final ZkClient zkClient, final SyncDataService syncDataService) {\n            return new ZookeeperDataInit(zkClient, syncDataService);\n        }\n    }\n    \n    // other code is omitted......\n}\n\n')),(0,i.yg)("p",null,"This configuration class is implemented through the SpringBoot conditional assembly class. The ZookeeperListener class has several annotations:"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("p",{parentName:"li"},(0,i.yg)("inlineCode",{parentName:"p"},"@Configuration"),": Configuration file, application context;")),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("p",{parentName:"li"},(0,i.yg)("inlineCode",{parentName:"p"},'@ConditionalOnProperty(prefix = "shenyu.sync.zookeeper", name = "url")'),": attribute condition. The configuration class takes effect only when the condition is met. That is, when we have the following configuration, ",(0,i.yg)("inlineCode",{parentName:"p"},"ZooKeeper")," is used for data synchronization."),(0,i.yg)("pre",{parentName:"li"},(0,i.yg)("code",{parentName:"pre",className:"language-properties"},"shenyu:  \n  sync:\n     zookeeper:\n          url: localhost:2181\n          sessionTimeout: 5000\n          connectionTimeout: 2000\n"))),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("p",{parentName:"li"},(0,i.yg)("inlineCode",{parentName:"p"},"@Import(ZookeeperConfiguration.class)"),"\uff1aimport ",(0,i.yg)("inlineCode",{parentName:"p"},"ZookeeperConfiguration"),";"))),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-java"},"  @EnableConfigurationProperties(ZookeeperProperties.class)  // enable zookeeper properties\n  public class ZookeeperConfiguration {\n\n    /**\n     * register zkClient in spring ioc.\n     * @param zookeeperProp the zookeeper configuration\n     * @return ZkClient {@linkplain ZkClient}\n        */\n      @Bean\n      @ConditionalOnMissingBean(ZkClient.class)\n      public ZkClient zkClient(final ZookeeperProperties zookeeperProp) {\n        return new ZkClient(zookeeperProp.getUrl(), zookeeperProp.getSessionTimeout(), zookeeperProp.getConnectionTimeout()); // \u8bfb\u53d6zk\u914d\u7f6e\u4fe1\u606f\uff0c\u5e76\u521b\u5efazkClient\n      }\n  }\n")),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-java"},'@Data\n@ConfigurationProperties(prefix = "shenyu.sync.zookeeper") // zookeeper properties\npublic class ZookeeperProperties {\n\n    private String url;\n\n    private Integer sessionTimeout;\n\n    private Integer connectionTimeout;\n\n    private String serializer;\n}\n')),(0,i.yg)("p",null,"When we take the initiative to configuration, use the ",(0,i.yg)("inlineCode",{parentName:"p"},"zookeeper")," data synchronization, ",(0,i.yg)("inlineCode",{parentName:"p"},"zookeeperDataChangedListener")," is generated. So in the event handler ",(0,i.yg)("inlineCode",{parentName:"p"},"onApplicationEvent()"),", it goes to the corresponding ",(0,i.yg)("inlineCode",{parentName:"p"},"listener"),". In our case, it is a selector data update, data synchronization is ",(0,i.yg)("inlineCode",{parentName:"p"},"zookeeper"),", so, the code will enter the ",(0,i.yg)("inlineCode",{parentName:"p"},"ZookeeperDataChangedListener")," selector data change process."),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-java"},'    @Override\n    @SuppressWarnings("unchecked")\n    public void onApplicationEvent(final DataChangedEvent event) {\n        // Iterate through the data change listener (usually using a data synchronization approach is fine)\n        for (DataChangedListener listener : listeners) {\n            // what kind of data has changed\n         switch (event.getGroupKey()) {\n                    \n                // other code logic is omitted\n                    \n                case SELECTOR:   // selector data\n                    listener.onSelectorChanged((List<SelectorData>) event.getSource(), event.getEventType());   // In our case, will enter the ZookeeperDataChangedListener selector data change process\n                    break;\n         }\n    }\n')),(0,i.yg)("h4",{id:"24-zookeeper-data-changed-listener"},"2.4 Zookeeper Data Changed Listener"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"ZookeeperDataChangedListener.onSelectorChanged()")),(0,i.yg)("p",null,"In the ",(0,i.yg)("inlineCode",{parentName:"p"},"onSelectorChanged()")," method, determine the type of action, whether to refresh synchronization or update or create synchronization. Determine whether the node is in ",(0,i.yg)("inlineCode",{parentName:"p"},"zk")," based on the current selector data."),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-java"},'\n/**\n * use ZooKeeper to publish change data\n */\npublic class ZookeeperDataChangedListener implements DataChangedListener {\n    \n    // The selector information changed\n    @Override\n    public void onSelectorChanged(final List<SelectorData> changed, final DataEventTypeEnum eventType) {\n        // refresh\n        if (eventType == DataEventTypeEnum.REFRESH && !changed.isEmpty()) {\n            String selectorParentPath = DefaultPathConstants.buildSelectorParentPath(changed.get(0).getPluginName());\n            deleteZkPathRecursive(selectorParentPath);\n        }\n        // changed data\n        for (SelectorData data : changed) {\n            // build selector real path\n            String selectorRealPath = DefaultPathConstants.buildSelectorRealPath(data.getPluginName(), data.getId());\n            // delete\n            if (eventType == DataEventTypeEnum.DELETE) {\n                deleteZkPath(selectorRealPath);\n                continue;\n            }\n            // selector parent path\n            String selectorParentPath = DefaultPathConstants.buildSelectorParentPath(data.getPluginName());\n            // create parent node\n            createZkNode(selectorParentPath);\n            // insert or update data\n            insertZkNode(selectorRealPath, data);\n        }\n    }\n\n    // create zk node\n    private void createZkNode(final String path) {\n        // create only if it does not exist\n        if (!zkClient.exists(path)) {\n            zkClient.createPersistent(path, true);\n        }\n    }\n\n    // insert zk node\n    private void insertZkNode(final String path, final Object data) {\n        // create zk node\n        createZkNode(path);\n        // write data by zkClient \n        zkClient.writeData(path, null == data ? "" : GsonUtils.getInstance().toJson(data));\n    }\n    \n}\n')),(0,i.yg)("p",null,"As long as the changed data is correctly written to the ",(0,i.yg)("inlineCode",{parentName:"p"},"zk")," node, the ",(0,i.yg)("inlineCode",{parentName:"p"},"admin")," side of the operation is complete. ",(0,i.yg)("inlineCode",{parentName:"p"},"ShenYu")," uses ",(0,i.yg)("inlineCode",{parentName:"p"},"zk")," for data synchronization, ",(0,i.yg)("inlineCode",{parentName:"p"},"zk")," nodes are carefully designed."),(0,i.yg)("p",null,"In our current case, updating one of the selector data in the ",(0,i.yg)("inlineCode",{parentName:"p"},"Divide")," plugin with a weight of 90 updates specific nodes in the graph."),(0,i.yg)("p",null,(0,i.yg)("img",{src:a(62350).A})),(0,i.yg)("p",null,"We series the above update flow with a sequence diagram."),(0,i.yg)("p",null,(0,i.yg)("img",{src:a(48762).A})),(0,i.yg)("h3",{id:"3-gateway-data-sync"},"3. Gateway Data Sync"),(0,i.yg)("p",null,"Assume that the ShenYu gateway is already running properly, and the data synchronization mode is also ",(0,i.yg)("inlineCode",{parentName:"p"},"Zookeeper"),". How does the gateway receive and process the selector data after updating it on the admin side and sending the changed data to ZK? Let's continue our source code analysis to find out."),(0,i.yg)("h4",{id:"31-zkclient-accept-data"},"3.1 ZkClient Accept Data"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"ZkClient.subscribeDataChanges()")),(0,i.yg)("p",null,"There is a ",(0,i.yg)("inlineCode",{parentName:"p"},"ZookeeperSyncDataService")," class on the gateway, which subscribing to the data node through ",(0,i.yg)("inlineCode",{parentName:"p"},"ZkClient")," and can sense when the data changes."),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-java"},"/**\n * ZookeeperSyncDataService\n */\npublic class ZookeeperSyncDataService implements SyncDataService, AutoCloseable {\n    \nprivate void subscribeSelectorDataChanges(final String path) {\n       // zkClient subscribe data \n        zkClient.subscribeDataChanges(path, new IZkDataListener() {\n            @Override\n            public void handleDataChange(final String dataPath, final Object data) {\n                cacheSelectorData(GsonUtils.getInstance().fromJson(data.toString(), SelectorData.class)); // zk node data changed\n            }\n\n            @Override\n            public void handleDataDeleted(final String dataPath) {\n                unCacheSelectorData(dataPath);  // zk node data deleted\n            }\n        });\n    }\n \n    // ...\n}\n")),(0,i.yg)("p",null,"ZooKeeper's  ",(0,i.yg)("inlineCode",{parentName:"p"},"Watch")," mechanism notifies subscribing clients of node changes. In our case, updating the selector information goes to the ",(0,i.yg)("inlineCode",{parentName:"p"},"handleDataChange()")," method. ",(0,i.yg)("inlineCode",{parentName:"p"},"cacheSelectorData()")," is used to process data."),(0,i.yg)("h4",{id:"32-handle-data"},"3.2 Handle Data"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"ZookeeperSyncDataService.cacheSelectorData()")),(0,i.yg)("p",null,"The data is not null, and caching the selector data is again handled by ",(0,i.yg)("inlineCode",{parentName:"p"},"PluginDataSubscriber"),"."),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-java"},"    private void cacheSelectorData(final SelectorData selectorData) {\n        Optional.ofNullable(selectorData)\n                .ifPresent(data -> Optional.ofNullable(pluginDataSubscriber).ifPresent(e -> e.onSelectorSubscribe(data)));\n    }\n")),(0,i.yg)("p",null,(0,i.yg)("inlineCode",{parentName:"p"},"PluginDataSubscriber")," is an interface, it is only a ",(0,i.yg)("inlineCode",{parentName:"p"},"CommonPluginDataSubscriber")," implementation class, responsible for data processing plugin, selector and rules."),(0,i.yg)("h4",{id:"33-common-plugin-data-subscriber"},"3.3 Common Plugin Data Subscriber"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"PluginDataSubscriber.onSelectorSubscribe()")),(0,i.yg)("p",null,"It has no additional logic and calls the ",(0,i.yg)("inlineCode",{parentName:"p"},"subscribeDataHandler()")," method directly. Within methods, there are data types (plugins, selectors, or rules) and action types (update or delete) to perform different logic."),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-java"},"/**\n * The common plugin data subscriber, responsible for handling all plug-in, selector, and rule information\n */\npublic class CommonPluginDataSubscriber implements PluginDataSubscriber {\n    //......\n     // handle selector data\n    @Override\n    public void onSelectorSubscribe(final SelectoData selectorData) {\n        subscribeDataHandler(selectorData, DataEventTypeEnum.UPDATE);\n    }    \n    \n    // A subscription data handler that handles updates or deletions of data\n    private <T> void subscribeDataHandler(final T classData, final DataEventTypeEnum dataType) {\n        Optional.ofNullable(classData).ifPresent(data -> {\n            // plugin data\n            if (data instanceof PluginData) {\n                PluginData pluginData = (PluginData) data;\n                if (dataType == DataEventTypeEnum.UPDATE) { // update\n                    // save the data to gateway memory\n                     BaseDataCache.getInstance().cachePluginData(pluginData);\n                    // If each plugin has its own processing logic, then do it\n                    Optional.ofNullable(handlerMap.get(pluginData.getName())).ifPresent(handler -> handler.handlerPlugin(pluginData));\n                } else if (dataType == DataEventTypeEnum.DELETE) {  // delete\n                    // delete the data from gateway memory\n                    BaseDataCache.getInstance().removePluginData(pluginData);\n                    // If each plugin has its own processing logic, then do it\n                    Optional.ofNullable(handlerMap.get(pluginData.getName())).ifPresent(handler -> handler.removePlugin(pluginData));\n                }\n            } else if (data instanceof SelectorData) {  // selector data\n                SelectorData selectorData = (SelectorData) data;\n                if (dataType == DataEventTypeEnum.UPDATE) { // update\n                    // save the data to gateway memory\n                    BaseDataCache.getInstance().cacheSelectData(selectorData);\n                    // If each plugin has its own processing logic, then do it \n                    Optional.ofNullable(handlerMap.get(selectorData.getPluginName())).ifPresent(handler -> handler.handlerSelector(selectorData));\n                } else if (dataType == DataEventTypeEnum.DELETE) {  // delete\n                    // delete the data from gateway memory\n                    BaseDataCache.getInstance().removeSelectData(selectorData);\n                    // If each plugin has its own processing logic, then do it\n                    Optional.ofNullable(handlerMap.get(selectorData.getPluginName())).ifPresent(handler -> handler.removeSelector(selectorData));\n                }\n            } else if (data instanceof RuleData) {  // rule data\n                RuleData ruleData = (RuleData) data;\n                if (dataType == DataEventTypeEnum.UPDATE) { // update\n                    // save the data to gateway memory\n                    BaseDataCache.getInstance().cacheRuleData(ruleData);\n                    // If each plugin has its own processing logic, then do it\n                    Optional.ofNullable(handlerMap.get(ruleData.getPluginName())).ifPresent(handler -> handler.handlerRule(ruleData));\n                } else if (dataType == DataEventTypeEnum.DELETE) { // delete\n                    // delete the data from gateway memory\n                    BaseDataCache.getInstance().removeRuleData(ruleData);\n                    // If each plugin has its own processing logic, then do it\n                    Optional.ofNullable(handlerMap.get(ruleData.getPluginName())).ifPresent(handler -> handler.removeRule(ruleData));\n                }\n            }\n        });\n    }\n    \n}\n")),(0,i.yg)("h4",{id:"34-data-cached-to-memory"},"3.4 Data cached to Memory"),(0,i.yg)("p",null,"Adding a selector will enter the following logic:"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-java"},"// save the data to gateway memory\nBaseDataCache.getInstance().cacheSelectData(selectorData);\n// If each plugin has its own processing logic, then do it\nOptional.ofNullable(handlerMap.get(selectorData.getPluginName())).ifPresent(handler -> handler.handlerSelector(selectorData));\n")),(0,i.yg)("p",null,"One is to save the data to the gateway's memory. BaseDataCache is the class that ultimately caches data, implemented in a singleton pattern. The selector data is stored in the ",(0,i.yg)("inlineCode",{parentName:"p"},"SELECTOR_MAP")," Map. In the subsequent use, also from this data."),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-java"},"public final class BaseDataCache {\n    // private instance\n    private static final BaseDataCache INSTANCE = new BaseDataCache();\n    // private constructor\n    private BaseDataCache() {\n    }\n    \n    /**\n     * Gets instance.\n     *  public method\n     * @return the instance\n     */\n    public static BaseDataCache getInstance() {\n        return INSTANCE;\n    }\n    \n    /**\n      * A Map of the cache selector data\n     * pluginName -> SelectorData.\n     */\n    private static final ConcurrentMap<String, List<SelectorData>> SELECTOR_MAP = Maps.newConcurrentMap();\n    \n    public void cacheSelectData(final SelectorData selectorData) {\n        Optional.ofNullable(selectorData).ifPresent(this::selectorAccept);\n    }\n        \n   /**\n     * cache selector data.\n     * @param data the selector data\n     */\n    private void selectorAccept(final SelectorData data) {\n        String key = data.getPluginName();\n        if (SELECTOR_MAP.containsKey(key)) { // Update operation, delete before insert\n            List<SelectorData> existList = SELECTOR_MAP.get(key);\n            final List<SelectorData> resultList = existList.stream().filter(r -> !r.getId().equals(data.getId())).collect(Collectors.toList());\n            resultList.add(data);\n            final List<SelectorData> collect = resultList.stream().sorted(Comparator.comparing(SelectorData::getSort)).collect(Collectors.toList());\n            SELECTOR_MAP.put(key, collect);\n        } else {  // Add new operations directly to Map\n            SELECTOR_MAP.put(key, Lists.newArrayList(data));\n        }\n    }\n    \n}\n")),(0,i.yg)("p",null,"Second, if each plugin has its own processing logic, then do it. Through the ",(0,i.yg)("inlineCode",{parentName:"p"},"IDEA")," editor, you can see that after adding a selector, there are the following plugins and processing. We're not going to expand it here."),(0,i.yg)("p",null,(0,i.yg)("img",{src:a(22159).A})),(0,i.yg)("p",null,"After the above source tracking, and through a practical case, in the ",(0,i.yg)("inlineCode",{parentName:"p"},"admin")," end to update a selector data, the ",(0,i.yg)("inlineCode",{parentName:"p"},"ZooKeeper")," data synchronization process analysis is clear."),(0,i.yg)("p",null,"Let's series the data synchronization process on the gateway side through the sequence diagram:"),(0,i.yg)("p",null,(0,i.yg)("img",{src:a(64515).A})),(0,i.yg)("p",null,"The data synchronization process has been analyzed. In order to prevent the synchronization process from being interrupted, other logic is ignored during the analysis. We also need to analyze the process of Admin synchronization data initialization and gateway synchronization operation initialization."),(0,i.yg)("h3",{id:"4-admin-data-sync--initialization"},"4. Admin Data Sync  initialization"),(0,i.yg)("p",null,"When ",(0,i.yg)("inlineCode",{parentName:"p"},"admin")," starts, the current data will be fully synchronized to ",(0,i.yg)("inlineCode",{parentName:"p"},"zk"),", the implementation logic is as follows:"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-java"},"\n/**\n * Zookeeper data init\n */\npublic class ZookeeperDataInit implements CommandLineRunner {\n\n    private final ZkClient zkClient;\n\n    private final SyncDataService syncDataService;\n\n    /**\n     * Instantiates a new Zookeeper data init.\n     *\n     * @param zkClient        the zk client\n     * @param syncDataService the sync data service\n     */\n    public ZookeeperDataInit(final ZkClient zkClient, final SyncDataService syncDataService) {\n        this.zkClient = zkClient;\n        this.syncDataService = syncDataService;\n    }\n\n    @Override\n    public void run(final String... args) {\n        String pluginPath = DefaultPathConstants.PLUGIN_PARENT;\n        String authPath = DefaultPathConstants.APP_AUTH_PARENT;\n        String metaDataPath = DefaultPathConstants.META_DATA;\n        // Determine whether data exists in zk\n        if (!zkClient.exists(pluginPath) && !zkClient.exists(authPath) && !zkClient.exists(metaDataPath)) {\n            syncDataService.syncAll(DataEventTypeEnum.REFRESH);\n        }\n    }\n}\n\n")),(0,i.yg)("p",null,"Check whether there is data in ",(0,i.yg)("inlineCode",{parentName:"p"},"zk"),", if not, then synchronize."),(0,i.yg)("p",null,(0,i.yg)("inlineCode",{parentName:"p"},"ZookeeperDataInit")," implements the ",(0,i.yg)("inlineCode",{parentName:"p"},"CommandLineRunner")," interface. It is an interface provided by ",(0,i.yg)("inlineCode",{parentName:"p"},"SpringBoot")," that executes the ",(0,i.yg)("inlineCode",{parentName:"p"},"run()")," method after all ",(0,i.yg)("inlineCode",{parentName:"p"},"Spring Beans")," initializations and is often used for initialization operations in a project."),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"SyncDataService.syncAll()")),(0,i.yg)("p",null,"Query data from the database, and then perform full data synchronization, all authentication information, plugin information, selector information, rule information, and metadata information. Synchronous events are published primarily through ",(0,i.yg)("inlineCode",{parentName:"p"},"eventPublisher"),". After publishing the event via ",(0,i.yg)("inlineCode",{parentName:"p"},"publishEvent()"),", the ",(0,i.yg)("inlineCode",{parentName:"p"},"ApplicationListener")," performs the event change operation. In ",(0,i.yg)("inlineCode",{parentName:"p"},"ShenYu")," is mentioned in ",(0,i.yg)("inlineCode",{parentName:"p"},"DataChangedEventDispatcher"),"."),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-java"},"@Service\npublic class SyncDataServiceImpl implements SyncDataService {\n    // eventPublisher\n    private final ApplicationEventPublisher eventPublisher;\n    \n     /***\n     * sync all data\n     * @param type the type\n     * @return\n     */\n    @Override\n    public boolean syncAll(final DataEventTypeEnum type) {\n        // app auth data\n        appAuthService.syncData();\n        // plugin data\n        List<PluginData> pluginDataList = pluginService.listAll();\n        eventPublisher.publishEvent(new DataChangedEvent(ConfigGroupEnum.PLUGIN, type, pluginDataList));\n        // selector data\n        List<SelectorData> selectorDataList = selectorService.listAll();\n        eventPublisher.publishEvent(new DataChangedEvent(ConfigGroupEnum.SELECTOR, type, selectorDataList));\n        // rule data\n        List<RuleData> ruleDataList = ruleService.listAll();\n        eventPublisher.publishEvent(new DataChangedEvent(ConfigGroupEnum.RULE, type, ruleDataList));\n        // metadata\n        metaDataService.syncData();\n        return true;\n    }\n    \n}\n")),(0,i.yg)("h3",{id:"5-gateway-data-sync-init"},"5. Gateway Data Sync Init"),(0,i.yg)("p",null,"The initial operation of data synchronization on the gateway side is mainly the node in the subscription ",(0,i.yg)("inlineCode",{parentName:"p"},"zk"),". When there is a data change, the changed data will be received. This relies on the ",(0,i.yg)("inlineCode",{parentName:"p"},"Watch")," mechanism of ",(0,i.yg)("inlineCode",{parentName:"p"},"ZooKeeper"),". In ",(0,i.yg)("inlineCode",{parentName:"p"},"ShenYu"),", the one responsible for ",(0,i.yg)("inlineCode",{parentName:"p"},"zk")," data synchronization is ",(0,i.yg)("inlineCode",{parentName:"p"},"ZookeeperSyncDataService"),", also mentioned earlier."),(0,i.yg)("p",null,"The function logic of ",(0,i.yg)("inlineCode",{parentName:"p"},"ZookeeperSyncDataService")," is completed in the process of instantiation: the subscription to ",(0,i.yg)("inlineCode",{parentName:"p"},"Shenyu")," data synchronization node in ",(0,i.yg)("inlineCode",{parentName:"p"},"zk")," is completed. Subscription here is divided into two kinds, one kind is existing node data updated above, through this ",(0,i.yg)("inlineCode",{parentName:"p"},"zkClient.subscribeDataChanges()")," method; Another kind is under the current node, add or delete nodes change namely child nodes, it through ",(0,i.yg)("inlineCode",{parentName:"p"},"zkClient.subscribeChildChanges()")," method."),(0,i.yg)("p",null,(0,i.yg)("inlineCode",{parentName:"p"},"ZookeeperSyncDataService")," code is a bit too much, here we use plugin data read and subscribe to track, other types of data operation principle is the same."),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-java"},"\n/**\n *  zookeeper sync data service\n */\npublic class ZookeeperSyncDataService implements SyncDataService, AutoCloseable {\n    // At instantiation time, the data is read from the ZK and the node is subscribed\n    public ZookeeperSyncDataService(/* omit the construction argument */ ) {\n        this.zkClient = zkClient;\n        this.pluginDataSubscriber = pluginDataSubscriber;\n        this.metaDataSubscribers = metaDataSubscribers;\n        this.authDataSubscribers = authDataSubscribers;\n        // watch plugin, selector and rule data\n        watcherData();\n        // watch app auth data\n        watchAppAuth();\n        // watch metadata\n        watchMetaData();\n    }\n    \n    private void watcherData() {\n        // plugin node path\n        final String pluginParent = DefaultPathConstants.PLUGIN_PARENT;\n        // all plugin nodes\n        List<String> pluginZKs = zkClientGetChildren(pluginParent);\n        for (String pluginName : pluginZKs) {\n            // watch plugin, selector, rule data node\n            watcherAll(pluginName);\n        }\n        //subscribing to child nodes (adding or removing a plugin)\n        zkClient.subscribeChildChanges(pluginParent, (parentPath, currentChildren) -> {\n            if (CollectionUtils.isNotEmpty(currentChildren)) {\n                for (String pluginName : currentChildren) {\n                    // you need to subscribe to all plugin, selector, and rule data for the child node\n                      watcherAll(pluginName);\n                }\n            }\n        });\n    }\n    \n    private void watcherAll(final String pluginName) {\n        // watch plugin\n        watcherPlugin(pluginName);\n        // watch selector\n        watcherSelector(pluginName);\n        // watch rule\n        watcherRule(pluginName);\n    }\n\n    private void watcherPlugin(final String pluginName) {\n        // plugin path\n        String pluginPath = DefaultPathConstants.buildPluginPath(pluginName);\n        // create if not exist\n        if (!zkClient.exists(pluginPath)) {\n            zkClient.createPersistent(pluginPath, true);\n        }\n        // read the current node data on zk and deserialize it\n        PluginData pluginData = null == zkClient.readData(pluginPath) ? null\n                : GsonUtils.getInstance().fromJson((String) zkClient.readData(pluginPath), PluginData.class);\n        // cached into gateway memory\n        cachePluginData(pluginData);\n        // subscribe plugin data\n        subscribePluginDataChanges(pluginPath, pluginName);\n    }\n    \n   private void cachePluginData(final PluginData pluginData) {\n    //omit implementation logic, is actually the CommonPluginDataSubscriber operation, can connect with the front\n    }\n    \n    private void subscribePluginDataChanges(final String pluginPath, final String pluginName) {\n        // subscribe data changes\n        zkClient.subscribeDataChanges(pluginPath, new IZkDataListener() {\n\n            @Override\n            public void handleDataChange(final String dataPath, final Object data) {  // update\n                 //omit implementation logic, is actually the CommonPluginDataSubscriber operation, can connect with the front\n            }\n\n            @Override\n            public void handleDataDeleted(final String dataPath) {   // delete\n                  // Omit implementation logic, is actually the CommonPluginDataSubscriber operation, can connect with the front\n\n            }\n        });\n    }\n    \n}    \n")),(0,i.yg)("p",null,"The above source code is given comments, I believe you can understand. The main logic for subscribing to plug-in data is as follows:"),(0,i.yg)("blockquote",null,(0,i.yg)("ol",{parentName:"blockquote"},(0,i.yg)("li",{parentName:"ol"},"Create the current plugin path"),(0,i.yg)("li",{parentName:"ol"},"Create a path if it does not exist"),(0,i.yg)("li",{parentName:"ol"},"Read the current node data on zK and deserialize it"),(0,i.yg)("li",{parentName:"ol"},"The plugin data is cached in the gateway memory"),(0,i.yg)("li",{parentName:"ol"},"Subscribe to the plug-in node"))),(0,i.yg)("h3",{id:"6-summary"},"6. Summary"),(0,i.yg)("p",null,"This paper through a practical case, ",(0,i.yg)("inlineCode",{parentName:"p"},"Zookeeper")," data synchronization principle source code analysis. The main knowledge points involved are as follows:"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("p",{parentName:"li"},"Data synchronization based on ",(0,i.yg)("inlineCode",{parentName:"p"},"ZooKeeper")," is mainly implemented through ",(0,i.yg)("inlineCode",{parentName:"p"},"watch")," mechanism;")),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("p",{parentName:"li"},"Complete event publishing and listening via ",(0,i.yg)("inlineCode",{parentName:"p"},"Spring"),";")),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("p",{parentName:"li"},"Support multiple synchronization strategies through abstract ",(0,i.yg)("inlineCode",{parentName:"p"},"DataChangedListener")," interface, interface oriented programming;")),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("p",{parentName:"li"},"Use singleton design pattern to cache data class ",(0,i.yg)("inlineCode",{parentName:"p"},"BaseDataCache"),";")),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("p",{parentName:"li"},"Loading of configuration classes via conditional assembly of ",(0,i.yg)("inlineCode",{parentName:"p"},"SpringBoot")," and ",(0,i.yg)("inlineCode",{parentName:"p"},"starter")," loading mechanism."))))}d.isMDXComponent=!0},62350:(e,n,a)=>{a.d(n,{A:()=>t});const t=a.p+"assets/images/zookeeper-node-c7628b680a1f1afa0eada97b66fcd5b1.png"},64515:(e,n,a)=>{a.d(n,{A:()=>t});const t=a.p+"assets/images/zk-sync-sequence-gateway-en-b061b46cd625eef35e95dd0b3eb20a27.png"},85505:(e,n,a)=>{a.d(n,{A:()=>t});const t=a.p+"assets/images/data-changed-listener-b01d7410746ca4afd526d8c9df865e9b.png"}}]);