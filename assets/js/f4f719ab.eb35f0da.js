"use strict";(self.webpackChunkshenyu_website=self.webpackChunkshenyu_website||[]).push([[48603],{15680:(e,n,r)=>{r.d(n,{xA:()=>p,yg:()=>y});var t=r(96540);function a(e,n,r){return n in e?Object.defineProperty(e,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[n]=r,e}function o(e,n){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),r.push.apply(r,t)}return r}function s(e){for(var n=1;n<arguments.length;n++){var r=null!=arguments[n]?arguments[n]:{};n%2?o(Object(r),!0).forEach((function(n){a(e,n,r[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(r,n))}))}return e}function i(e,n){if(null==e)return{};var r,t,a=function(e,n){if(null==e)return{};var r,t,a={},o=Object.keys(e);for(t=0;t<o.length;t++)r=o[t],n.indexOf(r)>=0||(a[r]=e[r]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(t=0;t<o.length;t++)r=o[t],n.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var l=t.createContext({}),c=function(e){var n=t.useContext(l),r=n;return e&&(r="function"==typeof e?e(n):s(s({},n),e)),r},p=function(e){var n=c(e.components);return t.createElement(l.Provider,{value:n},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},g=t.forwardRef((function(e,n){var r=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),u=c(r),g=a,y=u["".concat(l,".").concat(g)]||u[g]||d[g]||o;return r?t.createElement(y,s(s({ref:n},p),{},{components:r})):t.createElement(y,s({ref:n},p))}));function y(e,n){var r=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=r.length,s=new Array(o);s[0]=g;var i={};for(var l in n)hasOwnProperty.call(n,l)&&(i[l]=n[l]);i.originalType=e,i[u]="string"==typeof e?e:a,s[1]=i;for(var c=2;c<o;c++)s[c]=r[c];return t.createElement.apply(null,s)}return t.createElement.apply(null,r)}g.displayName="MDXCreateElement"},8826:(e,n,r)=>{r.r(n),r.d(n,{contentTitle:()=>s,default:()=>u,frontMatter:()=>o,metadata:()=>i,toc:()=>l});var t=r(58168),a=(r(96540),r(15680));const o={title:"Register Center Access",keywords:["soul"],description:"register center access"},s=void 0,i={unversionedId:"register-center/register-center-access",id:"version-2.3.0-Legacy/register-center/register-center-access",isDocsHomePage:!1,title:"Register Center Access",description:"register center access",source:"@site/versioned_docs/version-2.3.0-Legacy/register-center/register-center-access.md",sourceDirName:"register-center",slug:"/register-center/register-center-access",permalink:"/docs/2.3.0-Legacy/register-center/register-center-access",editUrl:"https://github.com/apache/shenyu-website/edit/main/versioned_docs/version-2.3.0-Legacy/register-center/register-center-access.md",version:"2.3.0-Legacy",frontMatter:{title:"Register Center Access",keywords:["soul"],description:"register center access"},sidebar:"version-2.3.0-Legacy/tutorialSidebar",previous:{title:"Use Different Data-Sync Strategy",permalink:"/docs/2.3.0-Legacy/users-guide/use-data-sync"},next:{title:"Register Center Design",permalink:"/docs/2.3.0-Legacy/register-center/register-center-design"}},l=[{value:"Explain",id:"explain",children:[]},{value:"HTTP Registry",id:"http-registry",children:[]},{value:"Zookeeper Registry",id:"zookeeper-registry",children:[]},{value:"Etcd Registry",id:"etcd-registry",children:[]},{value:"Consul Registry",id:"consul-registry",children:[]},{value:"Nacos Registry",id:"nacos-registry",children:[]}],c={toc:l},p="wrapper";function u(e){let{components:n,...r}=e;return(0,a.yg)(p,(0,t.A)({},c,r,{components:n,mdxType:"MDXLayout"}),(0,a.yg)("h2",{id:"explain"},"Explain"),(0,a.yg)("p",null,"Explain register center access config"),(0,a.yg)("h2",{id:"http-registry"},"HTTP Registry"),(0,a.yg)("h4",{id:"soul-admin"},"Soul-Admin"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},"Set the config in application.yml")),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-yaml"},"soul:\n  register:\n    registerType: http\n    props:\n      checked: true  # is checked\n      zombieCheckTimes: 5 # How many times does it fail to detect the service\n      scheduledTime: 10 # Timed detection interval time\n")),(0,a.yg)("h4",{id:"soul-client"},"Soul-Client"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},"Set the config in application.yml")),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-yaml"},"soul:\n  client:\n    registerType: http\n    serverLists: http://localhost:9095\n    props:\n      contextPath: /http\n      appName: http\n      port: 8188\n      isFull: false\n# registerType : register type, set http\n# serverList: when register type is http\uff0cset Soul-Admin address list\uff0cpls note 'http://' is necessary.\n# port: your project port number; apply to springmvc/tars/grpc\n# contextPath: your project's route prefix through soul gateway, such as /order \uff0c/product etc\uff0cgateway will route based on it.\n# appName\uff1ayour project name,the default value is`spring.application.name`.\n# isFull: set true means providing proxy for your entire service, or only a few controller. apply to springmvc/springcloud\n")),(0,a.yg)("h2",{id:"zookeeper-registry"},"Zookeeper Registry"),(0,a.yg)("h4",{id:"soul-admin-1"},"Soul-Admin"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},"Add dependency in pom.xml (Default has been added):")),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-xml"},"        <dependency>\n            <groupId>org.dromara</groupId>\n            <artifactId>soul-register-server-zookeeper</artifactId>\n            <version>${project.version}</version>\n        </dependency>\n")),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},"Set the config in application.yml")),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-yaml"},"soul:\n  register:\n    registerType: zookeeper\n    serverLists : localhost:2181\n    props:\n      sessionTimeout: 5000\n      connectionTimeout: 2000\n")),(0,a.yg)("h4",{id:"soul-client-1"},"Soul-Client"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},"Add dependency in pom.xml (Default has been added):")),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-xml"},"        <dependency>\n            <groupId>org.dromara</groupId>\n            <artifactId>soul-register-client-zookeeper</artifactId>\n            <version>${project.version}</version>\n        </dependency>\n")),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},"Set the config in application.yml")),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-yaml"},"soul:\n  client:\n    registerType: zookeeper\n    serverLists: localhost:2181\n    props:\n      contextPath: /http\n      appName: http\n      port: 8188  \n      isFull: false\n# registerType : register type, set zookeeper\n# serverList: when register type is zookeeper\uff0cset zookeeper address list\n# port: your project port number; apply to springmvc/tars/grpc\n# contextPath: your project's route prefix through soul gateway, such as /order \uff0c/product etc\uff0cgateway will route based on it.\n# appName\uff1ayour project name,the default value is`spring.application.name`.\n# isFull: set true means providing proxy for your entire service, or only a few controller. apply to springmvc/springcloud\n")),(0,a.yg)("h2",{id:"etcd-registry"},"Etcd Registry"),(0,a.yg)("h4",{id:"soul-admin-2"},"Soul-Admin"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},"Add dependency in pom.xml (Default has been added):")),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-xml"},"        <dependency>\n            <groupId>org.dromara</groupId>\n            <artifactId>soul-register-server-etcd</artifactId>\n            <version>${project.version}</version>\n        </dependency>\n")),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},"Set the config in application.yml")),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-yaml"},"soul:\n  register:\n    registerType: etcd\n    serverLists : http://localhost:2379\n    props:\n      etcdTimeout: 5000\n      etcdTTL: 5\n")),(0,a.yg)("h4",{id:"soul-client-2"},"Soul-Client"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},"Add dependency in pom.xml (Default has been added):")),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-xml"},"        <dependency>\n            <groupId>org.dromara</groupId>\n            <artifactId>soul-register-client-etcd</artifactId>\n            <version>${project.version}</version>\n        </dependency>\n")),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},"Set the config in application.yml")),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-yaml"},"soul:\n  client:\n    registerType: etcd\n    serverLists: http://localhost:2379\n    props:\n      contextPath: /http\n      appName: http\n      port: 8188  \n      isFull: false\n# registerType : register type, set etcd \n# serverList: when register type is etcd, add etcd address list\n# port: your project port number; apply to springmvc/tars/grpc\n# contextPath: your project's route prefix through soul gateway, such as /order \uff0c/product etc\uff0cgateway will route based on it.\n# appName\uff1ayour project name,the default value is`spring.application.name`.\n# isFull: set true means providing proxy for your entire service, or only a few controller. apply to springmvc/springcloud\n")),(0,a.yg)("h2",{id:"consul-registry"},"Consul Registry"),(0,a.yg)("h4",{id:"soul-admin-3"},"Soul-Admin"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},"Add dependency in pom.xml :")),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-xml"},"               \x3c!--soul-register-server-consul (Default has been added)--\x3e\n               <dependency>\n                   <groupId>org.dromara</groupId>\n                   <artifactId>soul-register-server-consul</artifactId>\n                   <version>${project.version}</version>\n               </dependency>\n\n               \x3c!--spring-cloud-starter-consul-discovery need add by yourself, suggest use 2.2.6.RELEASE version, other version maybe can't work--\x3e\n               <dependency>\n                   <groupId>org.springframework.cloud</groupId>\n                   <artifactId>spring-cloud-starter-consul-discovery</artifactId>\n                   <version>2.2.6.RELEASE</version>\n               </dependency>\n")),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},"Set the config in application.yml, additional need add spring.cloud.consul\uff1a")),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-yaml"},"soul:\n  register:\n    registerType: consul\n    props:\n      delay: 1\n      wait-time: 55\n\nspring:\n  cloud:\n    consul:\n      discovery:\n        instance-id: soul-admin-1\n        service-name: soul-admin\n        tags-as-metadata: false\n      host: localhost\n      port: 8500\n\n# registerType : register type, set consul.\n# delay: The interval of each polling of monitoring metadata, in seconds, the default value is 1 second.\n# wait-time: The waiting time for each polling of metadata monitoring, in seconds, the default value is 55 second.\n# instance-id: Required, Consul needs to find specific services through instance-id.\n# service-name: The name where the service is registered to consul. If not configured, the value of `spring.application.name` will be taken by default.\n# host: Consul server host, the default value is localhost.\n# port: Consul server port, the default value is 8500.\n# tags-as-metadata: false, Required, This option must be set to false, otherwise the URI information will not be found, will cause to selector and upstream cache unable to update.\n\n")),(0,a.yg)("h4",{id:"soul-client-3"},"Soul-Client"),(0,a.yg)("p",null,(0,a.yg)("strong",{parentName:"p"},"Note, consul registry is not compatible with current and SpringCloud will and Eureka / Nacos registry conflicts")," "),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},"Add dependency in pom.xml (need add by yourself, suggest use 2.2.6.RELEASE version, other version maybe can't work)\uff1a")),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-xml"},"            <dependency>\n               <groupId>org.springframework.cloud</groupId>\n               <artifactId>spring-cloud-starter-consul-discovery</artifactId>\n               <version>2.2.6.RELEASE</version>\n           </dependency>\n")),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},"Set the config in application.yml, additional need add spring.cloud.consul\uff1a")),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-yaml"},"soul:\n  client:\n    registerType: consul \n    props:\n      contextPath: /http\n      appName: http\n      port: 8188  \n      isFull: false\n\nspring:\n  cloud:\n    consul:\n      discovery:\n        instance-id: soul-http-1\n        service-name: soul-http\n      host: localhost\n      port: 8500\n\n# registerType : register type, set consul.\n# port: your project port number; apply to springmvc/tars/grpc\n# contextPath: your project's route prefix through soul gateway, such as /order \uff0c/product etc\uff0cgateway will route based on it.\n# appName\uff1ayour project name,the default value is`spring.application.name`.\n# isFull: set true means providing proxy for your entire service, or only a few controller. apply to springmvc\n# instance-id: Required, Consul needs to find specific services through instance-id.\n# service-name: The name where the service is registered to consul. If not configured, the value of `spring.application.name` will be taken by default.\n# host: Consul server host, the default value is localhost.\n# port: Consul server port, the default value is 8500.\n")),(0,a.yg)("h2",{id:"nacos-registry"},"Nacos Registry"),(0,a.yg)("h4",{id:"soul-admin-4"},"Soul-Admin"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},"Add dependency in pom.xml (Default has been added):")),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-xml"},"        <dependency>\n            <groupId>org.dromara</groupId>\n            <artifactId>soul-register-server-nacos</artifactId>\n            <version>${project.version}</version>\n        </dependency>\n")),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},"Set the config in application.yml")),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-yaml"},"soul:\n  register:\n    registerType: nacos\n    serverLists : localhost:8848\n    props:\n      nacosNameSpace: SoulRegisterCenter\n")),(0,a.yg)("h4",{id:"soul-client-4"},"Soul-Client"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},"Add dependency in pom.xml (Default has been added):")),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-xml"},"        <dependency>\n            <groupId>org.dromara</groupId>\n            <artifactId>soul-register-client-nacos</artifactId>\n            <version>${project.version}</version>\n        </dependency>\n")),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},"Set the config in application.yml")),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-yaml"},"soul:\n  client:\n    registerType: nacos\n    serverLists: localhost:8848\n    props:\n      contextPath: /http\n      appName: http\n      port: 8188  \n      isFull: false\n      nacosNameSpace: SoulRegisterCenter\n# registerType : register type, set etcd \n# serverList: when register type is etcd, add etcd address list\n# port: your project port number; apply to springmvc/tars/grpc\n# contextPath: your project's route prefix through soul gateway, such as /order \uff0c/product etc\uff0cgateway will route based on it.\n# appName\uff1ayour project name,the default value is`spring.application.name`.\n# isFull: set true means providing proxy for your entire service, or only a few controller. apply to springmvc/springcloud\n# nacosNameSpace: nacos namespace\n")))}u.isMDXComponent=!0}}]);