"use strict";(self.webpackChunkshenyu_website=self.webpackChunkshenyu_website||[]).push([[50149],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>m});var i=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,i,o=function(e,t){if(null==e)return{};var n,i,o={},r=Object.keys(e);for(i=0;i<r.length;i++)n=r[i],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(i=0;i<r.length;i++)n=r[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=i.createContext({}),c=function(e){var t=i.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},d=function(e){var t=c(e.components);return i.createElement(s.Provider,{value:t},e.children)},u="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},g=i.forwardRef((function(e,t){var n=e.components,o=e.mdxType,r=e.originalType,s=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),u=c(n),g=o,m=u["".concat(s,".").concat(g)]||u[g]||p[g]||r;return n?i.createElement(m,a(a({ref:t},d),{},{components:n})):i.createElement(m,a({ref:t},d))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var r=n.length,a=new Array(r);a[0]=g;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[u]="string"==typeof e?e:o,a[1]=l;for(var c=2;c<r;c++)a[c]=n[c];return i.createElement.apply(null,a)}return i.createElement.apply(null,n)}g.displayName="MDXCreateElement"},3694:(e,t,n)=>{n.r(t),n.d(t,{contentTitle:()=>a,default:()=>u,frontMatter:()=>r,metadata:()=>l,toc:()=>s});var i=n(87462),o=(n(67294),n(3905));const r={title:"Discovery",keywords:["Discovery"],description:"Discovery Modules"},a="1. Overview",l={unversionedId:"plugin-center/discovery/discovery-mode",id:"version-2.6.0/plugin-center/discovery/discovery-mode",isDocsHomePage:!1,title:"Discovery",description:"Discovery Modules",source:"@site/versioned_docs/version-2.6.0/plugin-center/discovery/discovery-mode.md",sourceDirName:"plugin-center/discovery",slug:"/plugin-center/discovery/discovery-mode",permalink:"/docs/2.6.0/plugin-center/discovery/discovery-mode",editUrl:"https://github.com/apache/shenyu-website/edit/main/versioned_docs/version-2.6.0/plugin-center/discovery/discovery-mode.md",version:"2.6.0",frontMatter:{title:"Discovery",keywords:["Discovery"],description:"Discovery Modules"},sidebar:"version-2.6.0/tutorialSidebar",previous:{title:"Mock Plugin",permalink:"/docs/2.6.0/plugin-center/mock/mock-plugin"},next:{title:"Custom Load Balancer",permalink:"/docs/2.6.0/developer/spi/custom-load-balance"}},s=[{value:"1.1 Module Name",id:"11-module-name",children:[]},{value:"1.2 Design",id:"12-design",children:[]},{value:"1.3 Notes",id:"13-notes",children:[{value:"1.3.1 Listener mode",id:"131-listener-mode",children:[]},{value:"1.3.2 Scope of action",id:"132-scope-of-action",children:[]}]},{value:"2.1 Plug-in level Configuration",id:"21-plug-in-level-configuration",children:[]},{value:"2.2 Selector level configuration",id:"22-selector-level-configuration",children:[]},{value:"3.1 Registration Information Configuration",id:"31-registration-information-configuration",children:[{value:"3.1.1 Basic Configuration",id:"311-basic-configuration",children:[]},{value:"3.1.2 Detailed explanation of data",id:"312-detailed-explanation-of-data",children:[]}]},{value:"3.2 Configuration in different modes",id:"32-configuration-in-different-modes",children:[{value:"3.1 LOCAL",id:"31-local",children:[]},{value:"3.2 ZOOKEEPER",id:"32-zookeeper",children:[]}]}],c={toc:s},d="wrapper";function u(e){let{components:t,...r}=e;return(0,o.kt)(d,(0,i.Z)({},c,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"1-overview"},"1. Overview"),(0,o.kt)("h2",{id:"11-module-name"},"1.1 Module Name"),(0,o.kt)("p",null,"Discovery"),(0,o.kt)("h2",{id:"12-design"},"1.2 Design"),(0,o.kt)("p",null,"Design drawing\n",(0,o.kt)("img",{alt:"discovery-design.png",src:n(23002).Z})),(0,o.kt)("p",null,"DataBase Design\n",(0,o.kt)("img",{alt:"db-design.png",src:n(16162).Z})),(0,o.kt)("h2",{id:"13-notes"},"1.3 Notes"),(0,o.kt)("p",null,"The 'Discovery' gateway admin service actively listens to register to the gateway service. The shenyu gateway has the ability to actively discover the changes of the proxy service list\n'Discovery' can be at the selector level or the plugin level.\nThe 'Discovery' plugin is currently introduced as a TCP plugin."),(0,o.kt)("h3",{id:"131-listener-mode"},"1.3.1 Listener mode"),(0,o.kt)("p",null,"LOCAL , ZOOKEEPER , NACOS(To be supported) , ERURKA(To be supported) ...."),(0,o.kt)("p",null,"LOCAL mode: relies heavily on manually maintaining the upstream list to push to the gateway"),(0,o.kt)("p",null,"ZOOKEEPER mode: Listen for temporary node changes in the specified node in zk for data"),(0,o.kt)("h3",{id:"132-scope-of-action"},"1.3.2 Scope of action"),(0,o.kt)("p",null,"Plugin-level: THIS APPLIES TO THE entire PLUGIN. All CHOICES MADE BY the PLUGIN will default to the current listening mode\nSelector level: This applies to the current selector. There are different selectors that use different listening modes under the current plugin"),(0,o.kt)("h1",{id:"2-how-to-use"},"2. How to use"),(0,o.kt)("h2",{id:"21-plug-in-level-configuration"},"2.1 Plug-in level Configuration"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"In the plugin that supports the Discovery module click 'Discovery configuration' to select the listening mode for the response\nTake Zookeeper as an example"),(0,o.kt)("p",{parentName:"li"},(0,o.kt)("img",{alt:"config_zk_plugin.png",src:n(48841).Z}))),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"In the selector, click 'Add' on the new selector page and click 'DiscoveryConfig' to find the Type type to force the plugin-level listener that you just configured\nIn this case, we need to listen to the 'ListenerNode' : /shenyu/discovery as an example"),(0,o.kt)("p",{parentName:"li"},(0,o.kt)("img",{alt:"add_listener_node.png",src:n(97665).Z})),(0,o.kt)("p",{parentName:"li"},"Note: In this Handler configuration, shenyu specifies that the upstream registration data is sent in the following json form"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-json"},' {\n     "url": "127.0.0.1::6379",  // upstream\'s url\n     "protocol": "tcp", // upstream\'s protocol\n     "status": 0, // upstream\'s (0, healthy, 1 unhealthy)\n     "weight": 10 // Used when calculating load balancing\n }\n')),(0,o.kt)("p",{parentName:"li"},"You can alias the handler if your service alias is different from the json format defined by shenyu\nIn the above image, I need to change the status to healthy. The other is to save the original json-key form")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"See plugin for details on how to configure selector properties"))),(0,o.kt)("h2",{id:"22-selector-level-configuration"},"2.2 Selector level configuration"),(0,o.kt)("p",null,"Similar to plug-in level configuration. Combine the '1', '2' steps above\n",(0,o.kt)("img",{alt:"discovery-seletor-config.png",src:n(50588).Z})),(0,o.kt)("p",null,"Note: When using selector levels. It has to be reconfigured each time"),(0,o.kt)("p",null,"If you choose the LOCAL mode, you don't need to log into a registry and manually maintain the upstream list"),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"discovery-local-mode.png",src:n(84495).Z})),(0,o.kt)("h1",{id:"3-configuration"},"3. Configuration"),(0,o.kt)("h2",{id:"31-registration-information-configuration"},"3.1 Registration Information Configuration"),(0,o.kt)("h3",{id:"311-basic-configuration"},"3.1.1 Basic Configuration"),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"common-config.png",src:n(11957).Z})),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Type registered Type ","[LOCAL | ZOOKEEPER]"),(0,o.kt)("li",{parentName:"ul"},"ListenerNode registers listeners like '/shenyu/discovery'"),(0,o.kt)("li",{parentName:"ul"},"Handler handles aliasing of upstream registration information"),(0,o.kt)("li",{parentName:"ul"},"ServerList registry link url")),(0,o.kt)("h3",{id:"312-detailed-explanation-of-data"},"3.1.2 Detailed explanation of data"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"The ",(0,o.kt)("inlineCode",{parentName:"li"},"upstream")," registration data is :")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "protocol": "tcp",\n  "url": "127.0.0.1:6379",\n  "status": 0,\n  "weight": 1,\n  "props": "{}"\n}\n')),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},'If the registered data format is different from the default json format, you can set an alias in the "Conversion process"\uff1a')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "${yourProtocol}": "tcp",\n  "${yourUrl}": "127.0.0.1:6379",\n  "${yourStatus}": 1,\n  "${yourWeight}": 1,\n  "${yourProps}": "{}"\n}\n')),(0,o.kt)("h2",{id:"32-configuration-in-different-modes"},"3.2 Configuration in different modes"),(0,o.kt)("h3",{id:"31-local"},"3.1 LOCAL"),(0,o.kt)("p",null,"Only the selector level is supported in LOCAL mode\nNo need to specify a link registry configuration just manually maintain the upstream list"),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"discovery-local-mode.png",src:n(84495).Z})),(0,o.kt)("h3",{id:"32-zookeeper"},"3.2 ZOOKEEPER"),(0,o.kt)("p",null,"ZOOKEEPER mode supports both the plugin level and the selector level"),(0,o.kt)("p",null,"SEE ",(0,o.kt)("inlineCode",{parentName:"p"},"shenyu-discovery-zookeeper#ZookeeperDiscoveryService#init")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "baseSleepTimeMilliseconds": "1000",\n  "maxRetries": "3",\n  "maxSleepTimeMilliseconds": "1000",\n  "connectionTimeoutMilliseconds": "1000",\n  "sessionTimeoutMilliseconds": "1000",\n  "namespace": "",\n  "digest": null\n}\n')),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},'You can search for the dictionary name as "zookeeper" in ',(0,o.kt)("inlineCode",{parentName:"li"},"shenyu-admin")," --\x3e BasicConfig --\x3e Dictionary,\nand modify the dictionary value corresponding to the default properties\n( ",(0,o.kt)("strong",{parentName:"li"},"Note"),": The dictionary type and dictionary name cannot be modified)\uff1a")),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"zk_dict.png",src:n(25664).Z})))}u.isMDXComponent=!0},97665:(e,t,n)=>{n.d(t,{Z:()=>i});const i=n.p+"assets/images/add_listener_node-fcab34011135088da7d7bfe08219bae5.png"},11957:(e,t,n)=>{n.d(t,{Z:()=>i});const i=n.p+"assets/images/common-config-4807e44ef780a311651c4c784c46040d.png"},48841:(e,t,n)=>{n.d(t,{Z:()=>i});const i=n.p+"assets/images/config_zk_plugin-5271390332992da24b2a6217511a5858.png"},16162:(e,t,n)=>{n.d(t,{Z:()=>i});const i=n.p+"assets/images/db-design-ace76c69c809afe5bf47464fc1b0209c.png"},23002:(e,t,n)=>{n.d(t,{Z:()=>i});const i=n.p+"assets/images/discovery-design-3081f14fec1ef9322d39bd1b998f42a3.png"},84495:(e,t,n)=>{n.d(t,{Z:()=>i});const i=n.p+"assets/images/discovery-local-mode-608163775c2d412644ce9af4fff9f23d.png"},50588:(e,t,n)=>{n.d(t,{Z:()=>i});const i=n.p+"assets/images/discovery-seletor-config-906cdc621f3f0100b3d36449a28cbb43.png"},25664:(e,t,n)=>{n.d(t,{Z:()=>i});const i=n.p+"assets/images/zk_dict_zh-7711eeddd9904ca431ad023400379950.png"}}]);