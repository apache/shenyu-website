"use strict";(self.webpackChunkshenyu_website=self.webpackChunkshenyu_website||[]).push([[39215],{15680:(e,r,a)=>{a.d(r,{xA:()=>u,yg:()=>y});var t=a(96540);function n(e,r,a){return r in e?Object.defineProperty(e,r,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[r]=a,e}function o(e,r){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);r&&(t=t.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),a.push.apply(a,t)}return a}function i(e){for(var r=1;r<arguments.length;r++){var a=null!=arguments[r]?arguments[r]:{};r%2?o(Object(a),!0).forEach((function(r){n(e,r,a[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(a,r))}))}return e}function s(e,r){if(null==e)return{};var a,t,n=function(e,r){if(null==e)return{};var a,t,n={},o=Object.keys(e);for(t=0;t<o.length;t++)a=o[t],r.indexOf(a)>=0||(n[a]=e[a]);return n}(e,r);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(t=0;t<o.length;t++)a=o[t],r.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(n[a]=e[a])}return n}var p=t.createContext({}),l=function(e){var r=t.useContext(p),a=r;return e&&(a="function"==typeof e?e(r):i(i({},r),e)),a},u=function(e){var r=l(e.components);return t.createElement(p.Provider,{value:r},e.children)},c="mdxType",g={inlineCode:"code",wrapper:function(e){var r=e.children;return t.createElement(t.Fragment,{},r)}},d=t.forwardRef((function(e,r){var a=e.components,n=e.mdxType,o=e.originalType,p=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),c=l(a),d=n,y=c["".concat(p,".").concat(d)]||c[d]||g[d]||o;return a?t.createElement(y,i(i({ref:r},u),{},{components:a})):t.createElement(y,i({ref:r},u))}));function y(e,r){var a=arguments,n=r&&r.mdxType;if("string"==typeof e||n){var o=a.length,i=new Array(o);i[0]=d;var s={};for(var p in r)hasOwnProperty.call(r,p)&&(s[p]=r[p]);s.originalType=e,s[c]="string"==typeof e?e:n,i[1]=s;for(var l=2;l<o;l++)i[l]=a[l];return t.createElement.apply(null,i)}return t.createElement.apply(null,a)}d.displayName="MDXCreateElement"},45040:(e,r,a)=>{a.r(r),a.d(r,{contentTitle:()=>i,default:()=>c,frontMatter:()=>o,metadata:()=>s,toc:()=>p});var t=a(58168),n=(a(96540),a(15680));const o={sidebar_position:5,title:"Sofa RPC Proxy",keywords:["sofa"],description:"sofa access soul gateway"},i=void 0,s={unversionedId:"users-guide/sofa-rpc-proxy",id:"version-2.3.0-Legacy/users-guide/sofa-rpc-proxy",isDocsHomePage:!1,title:"Sofa RPC Proxy",description:"sofa access soul gateway",source:"@site/versioned_docs/version-2.3.0-Legacy/users-guide/sofa-rpc-proxy.md",sourceDirName:"users-guide",slug:"/users-guide/sofa-rpc-proxy",permalink:"/docs/2.3.0-Legacy/users-guide/sofa-rpc-proxy",editUrl:"https://github.com/apache/shenyu-website/edit/main/versioned_docs/version-2.3.0-Legacy/users-guide/sofa-rpc-proxy.md",version:"2.3.0-Legacy",sidebarPosition:5,frontMatter:{sidebar_position:5,title:"Sofa RPC Proxy",keywords:["sofa"],description:"sofa access soul gateway"},sidebar:"version-2.3.0-Legacy/tutorialSidebar",previous:{title:"SpringCloud Proxy",permalink:"/docs/2.3.0-Legacy/users-guide/spring-cloud-proxy"},next:{title:"Use Different Data-Sync Strategy",permalink:"/docs/2.3.0-Legacy/users-guide/use-data-sync"}},p=[{value:"Description",id:"description",children:[]},{value:"Introduce the plug-in that the gateway supports for sofa",id:"introduce-the-plug-in-that-the-gateway-supports-for-sofa",children:[]},{value:"Plugin Settings",id:"plugin-settings",children:[]},{value:"Interface registered to the gateway",id:"interface-registered-to-the-gateway",children:[]},{value:"sofa user request and parameter description",id:"sofa-user-request-and-parameter-description",children:[]}],l={toc:p},u="wrapper";function c(e){let{components:r,...a}=e;return(0,n.yg)(u,(0,t.A)({},l,a,{components:r,mdxType:"MDXLayout"}),(0,n.yg)("h2",{id:"description"},"Description"),(0,n.yg)("ul",null,(0,n.yg)("li",{parentName:"ul"},"This article is about sofa users using sofa plug-in support,and the tutorial of connecting your own sofa service to the soul gateway."),(0,n.yg)("li",{parentName:"ul"},"Before connecting, please start ",(0,n.yg)("inlineCode",{parentName:"li"},"soul-admin")," correctly and ",(0,n.yg)("a",{parentName:"li",href:"./soul-set-up"},"Setup Environment")," Ok\u3002")),(0,n.yg)("h2",{id:"introduce-the-plug-in-that-the-gateway-supports-for-sofa"},"Introduce the plug-in that the gateway supports for sofa"),(0,n.yg)("ul",null,(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("p",{parentName:"li"},"Add the following dependencies in the gateway's ",(0,n.yg)("inlineCode",{parentName:"p"},"pom.xml")," file\uff1a")),(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("p",{parentName:"li"},"Replace the sofa version with yours, and replace the jar package in the registry with yours, The following is a reference\u3002"),(0,n.yg)("pre",{parentName:"li"},(0,n.yg)("code",{parentName:"pre",className:"language-xml"},"<dependency>\n   <groupId>com.alipay.sofa</groupId>\n   <artifactId>sofa-rpc-all</artifactId>\n   <version>5.7.6</version>\n</dependency>\n<dependency>\n   <groupId>org.apache.curator</groupId>\n   <artifactId>curator-client</artifactId>\n   <version>4.0.1</version>\n</dependency>\n<dependency>\n   <groupId>org.apache.curator</groupId>\n   <artifactId>curator-framework</artifactId>\n   <version>4.0.1</version>\n</dependency>\n<dependency>\n   <groupId>org.apache.curator</groupId>\n   <artifactId>curator-recipes</artifactId>\n   <version>4.0.1</version>\n</dependency>\n<dependency>\n   <groupId>org.dromara</groupId>\n   <artifactId>soul-spring-boot-starter-plugin-sofa</artifactId>\n   <version>${last.version}</version>\n</dependency>\n")))),(0,n.yg)("pre",null,(0,n.yg)("code",{parentName:"pre"},"\n* Restart the gateway service.\n\n## sofa service access gateway, you can refer to\uff1a[soul-examples-sofa](https://github.com/dromara/soul/tree/2.3.0/soul-examples/soul-examples-sofa)\n\n* Springboot\n\n  * Introduce the following dependencies :\n\n ```xml\n        <dependency>\n            <groupId>org.dromara</groupId>\n            <artifactId>soul-spring-boot-starter-client-sofa</artifactId>\n            <version>${soul.version}</version>\n        </dependency>\n")),(0,n.yg)("ul",null,(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("p",{parentName:"li"},"backend server register center config, please look:",(0,n.yg)("a",{parentName:"p",href:"../register-center/register-center-access"},"register center access"),".")),(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("p",{parentName:"li"},"Spring"),(0,n.yg)("ul",{parentName:"li"},(0,n.yg)("li",{parentName:"ul"},"Introduce the following dependencies:")),(0,n.yg)("pre",{parentName:"li"},(0,n.yg)("code",{parentName:"pre",className:"language-xml"},"       <dependency>\n           <groupId>org.dromara</groupId>\n           <artifactId>soul-client-sofa</artifactId>\n           <version>${project.version}</version>\n       </dependency>\n"))),(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("p",{parentName:"li"},"Add the following in the xml file of your bean definition:"),(0,n.yg)("pre",{parentName:"li"},(0,n.yg)("code",{parentName:"pre",className:"language-xml"},'      <bean id ="sofaServiceBeanPostProcessor" class ="org.dromara.soul.client.sofa.SofaServiceBeanPostProcessor">\n           <constructor-arg  ref="soulRegisterCenterConfig"/>\n      </bean>\n\n   <bean id="soulRegisterCenterConfig" class="org.dromara.soul.register.common.config.SoulRegisterCenterConfig">\n     <property name="registerType" value="http"/>\n     <property name="serverList" value="http://localhost:9095"/>\n     <property name="props">\n          <map>\n               <entry key="contextPath" value="/your contextPath"/>\n               <entry key="appName" value="your name"/>\n               <entry key="isFull" value="false"/>\n          </map>\n     </property>\n  </bean>\n')))),(0,n.yg)("h2",{id:"plugin-settings"},"Plugin Settings"),(0,n.yg)("ul",null,(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("p",{parentName:"li"},"First in the ",(0,n.yg)("inlineCode",{parentName:"p"},"soul-admin")," plugin management, set the ",(0,n.yg)("inlineCode",{parentName:"p"},"sofa")," plugin to open.")),(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("p",{parentName:"li"},"Secondly, configure your registered address in the ",(0,n.yg)("inlineCode",{parentName:"p"},"sofa")," plugin, or the address of other registry."))),(0,n.yg)("pre",null,(0,n.yg)("code",{parentName:"pre",className:"language-yaml"},'{"protocol":"zookeeper","register":"127.0.0.1:2181"}\n')),(0,n.yg)("h2",{id:"interface-registered-to-the-gateway"},"Interface registered to the gateway"),(0,n.yg)("ul",null,(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("p",{parentName:"li"},"For your sofa service implementation class, add @SoulSofaClient annotation to the method\uff0cIndicates that the interface method is registered to the gateway.")),(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("p",{parentName:"li"},"Start your provider and output the log ",(0,n.yg)("inlineCode",{parentName:"p"},"sofa client register success"),". You\u2019re done. Your sofa interface has been published to the soul gateway. If you still don\u2019t understand, you can refer to the ",(0,n.yg)("inlineCode",{parentName:"p"},"soul-test-sofa")," project."))),(0,n.yg)("h2",{id:"sofa-user-request-and-parameter-description"},"sofa user request and parameter description"),(0,n.yg)("ul",null,(0,n.yg)("li",{parentName:"ul"},"To put it bluntly, it is to request your sofa service through http"),(0,n.yg)("li",{parentName:"ul"},"Soul gateway needs to have a routing prefix, this routing prefix is for you to access the project for configuration ",(0,n.yg)("inlineCode",{parentName:"li"},"contextPath"))),(0,n.yg)("pre",null,(0,n.yg)("code",{parentName:"pre",className:"language-yaml"},"# For example, if you have an order service, it has an interface and its registration path /order/test/save\n\n# Now it's to request the gateway via post\uff1ahttp://localhost:9195/order/test/save\n\n# Where localhost:9195 is the IP port of the gateway\uff0cdefault port is 9195 \uff0c/order is the contextPath of your sofa access gateway configuration\n")),(0,n.yg)("ul",null,(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("p",{parentName:"li"},"Parameter passing\uff1a"),(0,n.yg)("ul",{parentName:"li"},(0,n.yg)("li",{parentName:"ul"},"Access the gateway through http post\uff0cand pass through body and json."),(0,n.yg)("li",{parentName:"ul"},"For more parameter type transfer, please refer to the interface definition in ",(0,n.yg)("a",{parentName:"li",href:"https://github.com/dromara/soul/tree/2.3.0/soul-examples/soul-examples-sofa"},"soul-examples-sofa")," and the parameter transfer method."))),(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("p",{parentName:"li"},"Single java bean parameter type (default)")),(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("p",{parentName:"li"},"Customize multi-parameter support:")),(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("p",{parentName:"li"},"In the gateway project you built\uff0cadd a new class A\uff0cimplements org.dromara.soul.plugin.api.sofa.SofaParamResolveService\u3002"),(0,n.yg)("pre",{parentName:"li"},(0,n.yg)("code",{parentName:"pre",className:"language-java"},"   public interface SofaParamResolveService {\n   \n       /**\n        * Build parameter pair.\n        * this is Resolve http body to get sofa param.\n        *\n        * @param body           the body\n        * @param parameterTypes the parameter types\n        * @return the pair\n        */\n       Pair<String[], Object[]> buildParameter(String body, String parameterTypes);\n   }\n"))),(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("p",{parentName:"li"},(0,n.yg)("inlineCode",{parentName:"p"},"body")," is the json string passed by body in http. ")),(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("p",{parentName:"li"},(0,n.yg)("inlineCode",{parentName:"p"},"parameterTypes"),": list of matched method parameter types, If there are multiple, use ",(0,n.yg)("inlineCode",{parentName:"p"},",")," to separate.")),(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("p",{parentName:"li"},"In Pair\uff0cleft is the parameter type\uff0cand right is the parameter value. This is the standard for sofa generalization calls.")),(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("p",{parentName:"li"},"Register your class as a String bean and override the default implementation."),(0,n.yg)("pre",{parentName:"li"},(0,n.yg)("code",{parentName:"pre",className:"language-java"},"@Bean\npublic SofaParamResolveService A() {\n   return new A();\n}\n")))),(0,n.yg)("pre",null,(0,n.yg)("code",{parentName:"pre"},"")))}c.isMDXComponent=!0}}]);