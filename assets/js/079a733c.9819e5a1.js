"use strict";(self.webpackChunkshenyu_website=self.webpackChunkshenyu_website||[]).push([[5402],{15680:(e,n,t)=>{t.d(n,{xA:()=>c,yg:()=>g});var r=t(96540);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var l=r.createContext({}),p=function(e){var n=r.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},c=function(e){var n=p(e.components);return r.createElement(l.Provider,{value:n},e.children)},m="mdxType",u={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},d=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),m=p(t),d=a,g=m["".concat(l,".").concat(d)]||m[d]||u[d]||o;return t?r.createElement(g,i(i({ref:n},c),{},{components:t})):r.createElement(g,i({ref:n},c))}));function g(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,i=new Array(o);i[0]=d;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s[m]="string"==typeof e?e:a,i[1]=s;for(var p=2;p<o;p++)i[p]=t[p];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},38725:(e,n,t)=>{t.r(n),t.d(n,{contentTitle:()=>i,default:()=>m,frontMatter:()=>o,metadata:()=>s,toc:()=>l});var r=t(58168),a=(t(96540),t(15680));const o={title:"Custom Mock Data Generator",keywords:["Mock"],description:"custom mock data generator"},i=void 0,s={unversionedId:"developer/spi/custom-mock-generator",id:"version-2.5.1/developer/spi/custom-mock-generator",isDocsHomePage:!1,title:"Custom Mock Data Generator",description:"custom mock data generator",source:"@site/versioned_docs/version-2.5.1/developer/spi/custom-mock-generator.md",sourceDirName:"developer/spi",slug:"/developer/spi/custom-mock-generator",permalink:"/docs/2.5.1/developer/spi/custom-mock-generator",editUrl:"https://github.com/apache/shenyu-website/edit/main/versioned_docs/version-2.5.1/developer/spi/custom-mock-generator.md",version:"2.5.1",frontMatter:{title:"Custom Mock Data Generator",keywords:["Mock"],description:"custom mock data generator"},sidebar:"version-2.5.1/tutorialSidebar",previous:{title:"Custom Metrics Monitor",permalink:"/docs/2.5.1/developer/spi/custom-metrics-monitor"},next:{title:"Custom Parameter Data",permalink:"/docs/2.5.1/developer/spi/custom-parameter-data"}},l=[{value:"Explanation",id:"explanation",children:[]},{value:"Extension",id:"extension",children:[]}],p={toc:l},c="wrapper";function m(e){let{components:n,...t}=e;return(0,a.yg)(c,(0,r.A)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,a.yg)("h2",{id:"explanation"},"Explanation"),(0,a.yg)("ol",null,(0,a.yg)("li",{parentName:"ol"},"This article describes how to make custom extensions to ",(0,a.yg)("inlineCode",{parentName:"li"},"org.apache.shenyu.plugin.mock.generator.Generator"),"."),(0,a.yg)("li",{parentName:"ol"},"The mock data generation expression needs to satisfy the format of ",(0,a.yg)("inlineCode",{parentName:"li"},"${name|param1|param2|...}"))),(0,a.yg)("h2",{id:"extension"},"Extension"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},"Create a new project and introduce the following dependencies:")),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-xml"},"<dependencies>\n    <dependency>\n        <groupId>org.apache.shenyu</groupId>\n        <artifactId>shenyu-plugin-mock</artifactId>\n        <version>${project.version}</version>\n    </dependency>\n</dependencies>\n")),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},"Create a new class  ",(0,a.yg)("inlineCode",{parentName:"li"},"CustomerGenerator"),"\uff0cimplements ",(0,a.yg)("inlineCode",{parentName:"li"},"org.apache.shenyu.plugin.mock.generator.Generator"),"\u3002")),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-java"},"@Join\npublic class CustomGenerator implements Generator<String> {\n    @Override\n    public String getName() {\n        // The name of the generator, i.e. the content before the first | of the expression\n    }\n    \n    @Override\n    public String generate() {\n        // Implement the logic of data generation\n    }\n    \n    @Override\n    public int getParamSize() {\n        // The number of required parameters of the expression\n    }\n    \n    @Override\n    public void initParam(List params, String rule) {\n        // params is the contents except the name after the expression is split according to |\n        // rule is the content of the original expression , if there is a custom parameter processing logic, you can use this parameter\n    }\n    \n    @Override\n    public boolean match(String rule) {\n        // Check if the current expression is valid\n    }\n    \n    @Override\n    public String[] getPrefixAndSuffix() {\n        // Return the prefix and suffix added after the generated content, please return a string array with two elements\n        // 0th element is the prefix, 1st element is the suffix\n    }\n}\n")),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},"In the project  ",(0,a.yg)("inlineCode",{parentName:"li"},"resources")," directory\uff0cCreate a new ",(0,a.yg)("inlineCode",{parentName:"li"},"META-INF/shenyu")," directory\uff0c and the new file name is : ",(0,a.yg)("inlineCode",{parentName:"li"},"org.apache.shenyu.plugin.mock.generator.Generator"),".\nadd ",(0,a.yg)("inlineCode",{parentName:"li"},"${you spi name}")," = ",(0,a.yg)("inlineCode",{parentName:"li"},"${you class path}"),":")),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-shell",metastring:'title="script"',title:'"script"'},"${spi name}=${custom class path}\n")),(0,a.yg)("p",null,(0,a.yg)("inlineCode",{parentName:"p"},"${spi name}")," represents the name of ",(0,a.yg)("inlineCode",{parentName:"p"},"spi"),", ",(0,a.yg)("inlineCode",{parentName:"p"},"${spi name }")," needs to be consistent with the definition of the getName() method in the Generator implementation class, ",(0,a.yg)("inlineCode",{parentName:"p"},"${custom class path}")," represents the fully qualified name of the class. for example:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-shell",metastring:'title="script"',title:'"script"'},"custom=xxx.xxx.xxx.CustomGenerator\n")),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},"Package the project and copy it to the ",(0,a.yg)("inlineCode",{parentName:"li"},"lib")," or ",(0,a.yg)("inlineCode",{parentName:"li"},"ext-lib")," directory of the gateway (bootstrap-bin).")))}m.isMDXComponent=!0}}]);