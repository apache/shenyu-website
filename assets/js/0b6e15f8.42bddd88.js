"use strict";(self.webpackChunkshenyu_website=self.webpackChunkshenyu_website||[]).push([[37668],{95788:(e,n,t)=>{t.d(n,{Iu:()=>g,yg:()=>h});var a=t(11504);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var s=a.createContext({}),u=function(e){var n=a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},g=function(e){var n=u(e.components);return a.createElement(s.Provider,{value:n},e.children)},c="mdxType",p={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},d=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,g=o(e,["components","mdxType","originalType","parentName"]),c=u(t),d=r,h=c["".concat(s,".").concat(d)]||c[d]||p[d]||i;return t?a.createElement(h,l(l({ref:n},g),{},{components:t})):a.createElement(h,l({ref:n},g))}));function h(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var i=t.length,l=new Array(i);l[0]=d;var o={};for(var s in n)hasOwnProperty.call(n,s)&&(o[s]=n[s]);o.originalType=e,o[c]="string"==typeof e?e:r,l[1]=o;for(var u=2;u<i;u++)l[u]=t[u];return a.createElement.apply(null,l)}return a.createElement.apply(null,t)}d.displayName="MDXCreateElement"},90240:(e,n,t)=>{t.r(n),t.d(n,{contentTitle:()=>l,default:()=>c,frontMatter:()=>i,metadata:()=>o,toc:()=>s});var a=t(45072),r=(t(11504),t(95788));const i={title:"Code Analysis For Dubbo Plugin",author:"midnight2104",author_title:"Apache ShenYu Committer",author_url:"https://github.com/midnight2104",tags:["plugin","dubbo","Apache ShenYu"]},l=void 0,o={permalink:"/blog/Plugin-SourceCode-Analysis-Dubbo-Plugin",editUrl:"https://github.com/apache/shenyu-website/edit/main/blog/Plugin-SourceCode-Analysis-Dubbo-Plugin.md",source:"@site/blog/Plugin-SourceCode-Analysis-Dubbo-Plugin.md",title:"Code Analysis For Dubbo Plugin",description:"Apache ShenYu is an asynchronous, high-performance, cross-language, responsive API gateway.",date:"2024-02-04T02:26:31.690Z",formattedDate:"February 4, 2024",tags:[{label:"plugin",permalink:"/blog/tags/plugin"},{label:"dubbo",permalink:"/blog/tags/dubbo"},{label:"Apache ShenYu",permalink:"/blog/tags/apache-shen-yu"}],readingTime:21.51,truncated:!1,prevItem:{title:"Code Analysis For Divide Plugin",permalink:"/blog/Plugin-SourceCode-Analysis-Divide-Plugin"},nextItem:{title:"Code Analysis For Param-Mapping Plugin",permalink:"/blog/Plugin-SourceCode-Analysis-Param-Mapping-Plugin"}},s=[{value:"1. Service Registration",id:"1-service-registration",children:[]},{value:"2. Service Invocation",id:"2-service-invocation",children:[]},{value:"3. Summary",id:"3-summary",children:[]}],u={toc:s},g="wrapper";function c(e){let{components:n,...i}=e;return(0,r.yg)(g,(0,a.c)({},u,i,{components:n,mdxType:"MDXLayout"}),(0,r.yg)("blockquote",null,(0,r.yg)("p",{parentName:"blockquote"},(0,r.yg)("a",{parentName:"p",href:"https://shenyu.apache.org/zh/docs/index"},"Apache ShenYu")," is an asynchronous, high-performance, cross-language, responsive ",(0,r.yg)("inlineCode",{parentName:"p"},"API")," gateway.")),(0,r.yg)("p",null,"The ",(0,r.yg)("inlineCode",{parentName:"p"},"Apache ShenYu")," gateway uses the ",(0,r.yg)("inlineCode",{parentName:"p"},"dubbo")," plugin to make calls to the ",(0,r.yg)("inlineCode",{parentName:"p"},"dubbo")," service. You can see the official documentation ",(0,r.yg)("a",{parentName:"p",href:"https://shenyu.apache.org/docs/quick-start/quick-start-dubbo"},"Dubbo Quick Start")," to learn how to use the plugin."),(0,r.yg)("blockquote",null,(0,r.yg)("p",{parentName:"blockquote"},"This article is based on ",(0,r.yg)("inlineCode",{parentName:"p"},"shenyu-2.4.3")," version for source code analysis, please refer to ",(0,r.yg)("a",{parentName:"p",href:"https://shenyu.apache.org/zh/docs/user-guide/dubbo-proxy/"},"Dubbo Service Access")," for the introduction of the official website.")),(0,r.yg)("h3",{id:"1-service-registration"},"1. Service Registration"),(0,r.yg)("p",null,"Take the example provided on the official website ",(0,r.yg)("a",{parentName:"p",href:"https://github.com/apache/incubator-shenyu/tree/master/shenyu-examples/shenyu-examples-dubbo/shenyu-examples-apache-dubbo-service"},"shenyu-examples-dubbo"),". Suppose your ",(0,r.yg)("inlineCode",{parentName:"p"},"dubbo")," service is defined as follows (",(0,r.yg)("inlineCode",{parentName:"p"},"spring-dubbo.xml"),")."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-xml"},'<beans xmlns="http://www.springframework.org/schema/beans"\n       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"\n       xmlns:dubbo="http://code.alibabatech.com/schema/dubbo"\n       xsi:schemaLocation="http://www.springframework.org/schema/beans\n       http://www.springframework.org/schema/beans/spring-beans.xsd\n       http://code.alibabatech.com/schema/dubbo\n       https://code.alibabatech.com/schema/dubbo/dubbo.xsd">\n\n    <dubbo:application name="test-dubbo-service"/>\n    <dubbo:registry address="${dubbo.registry.address}"/>\n    <dubbo:protocol name="dubbo" port="20888"/>\n\n    <dubbo:service timeout="10000" interface="org.apache.shenyu.examples.dubbo.api.service.DubboTestService" ref="dubboTestService"/>\n\n</beans>\n')),(0,r.yg)("p",null,"Declare the application service name, register the center address, use the ",(0,r.yg)("inlineCode",{parentName:"p"},"dubbo")," protocol, declare the service interface, and the corresponding interface implementation class."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-java"},'/**\n * DubboTestServiceImpl.\n */\n@Service("dubboTestService")\npublic class DubboTestServiceImpl implements DubboTestService {\n    \n    @Override\n    @ShenyuDubboClient(path = "/findById", desc = "Query by Id")\n    public DubboTest findById(final String id) {\n        return new DubboTest(id, "hello world shenyu Apache, findById");\n    }\n\n    //......\n}\n')),(0,r.yg)("p",null,"In the interface implementation class, use the annotation ",(0,r.yg)("inlineCode",{parentName:"p"},"@ShenyuDubboClient")," to register the service with ",(0,r.yg)("inlineCode",{parentName:"p"},"shenyu-admin"),". The role of this annotation and its rationale will be analyzed later."),(0,r.yg)("p",null,"The configuration information in the configuration file ",(0,r.yg)("inlineCode",{parentName:"p"},"application.yml"),"."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-yaml"},"server:\n  port: 8011\n  address: 0.0.0.0\n  servlet:\n    context-path: /\nspring:\n  main:\n    allow-bean-definition-overriding: true\ndubbo:\n  registry:\n    address: zookeeper://localhost:2181  # dubbo registry\n    \nshenyu:\n  register:\n    registerType: http \n    serverLists: http://localhost:9095 \n    props:\n      username: admin \n      password: 123456\n  client:\n    dubbo:\n      props:\n        contextPath: /dubbo  \n        appName: dubbo\n\n")),(0,r.yg)("p",null,"In the configuration file, declare the registry address used by ",(0,r.yg)("inlineCode",{parentName:"p"},"dubbo"),". The ",(0,r.yg)("inlineCode",{parentName:"p"},"dubbo")," service registers with ",(0,r.yg)("inlineCode",{parentName:"p"},"shenyu-admin"),", using the method ",(0,r.yg)("inlineCode",{parentName:"p"},"http"),", and the registration address is ",(0,r.yg)("inlineCode",{parentName:"p"},"http://localhost:9095"),"."),(0,r.yg)("p",null,"See ",(0,r.yg)("a",{parentName:"p",href:"https://shenyu.apache.org/docs/design/register-center-design/"},"Application Client Access")," for more information on the use of the registration method."),(0,r.yg)("h4",{id:"11--declaration-of-registration-interface"},"1.1  Declaration of registration interface"),(0,r.yg)("p",null,"Use the annotation ",(0,r.yg)("inlineCode",{parentName:"p"},"@ShenyuDubboClient")," to register the service to the gateway. The simple ",(0,r.yg)("inlineCode",{parentName:"p"},"demo")," is as follows."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-java"},'// dubbo sevice\n@Service("dubboTestService")\npublic class DubboTestServiceImpl implements DubboTestService {\n    \n    @Override\n    @ShenyuDubboClient(path = "/findById", desc = "Query by Id") // need to be registered method\n    public DubboTest findById(final String id) {\n        return new DubboTest(id, "hello world shenyu Apache, findById");\n    }\n\n    //......\n}\n')),(0,r.yg)("p",null,"annotation definition:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-java"},'/**\n * Works on classes and methods\n */\n@Retention(RetentionPolicy.RUNTIME)\n@Target({ElementType.TYPE, ElementType.METHOD})\n@Inherited\npublic @interface ShenyuDubboClient {\n    \n    //path\n    String path();\n    \n    //rule name\n    String ruleName() default "";\n   \n    //desc\n    String desc() default "";\n\n    //enabled\n    boolean enabled() default true;\n}\n\n')),(0,r.yg)("h4",{id:"12-scan-annotation-information"},"1.2 Scan annotation information"),(0,r.yg)("p",null,"Annotation scanning is done through the ",(0,r.yg)("inlineCode",{parentName:"p"},"ApacheDubboServiceBeanListener"),", which implements the ",(0,r.yg)("inlineCode",{parentName:"p"},"ApplicationListener<ContextRefreshedEvent>")," interface and starts executing the event handler method when a context refresh event occurs during the ",(0,r.yg)("inlineCode",{parentName:"p"},"Spring")," container startup ",(0,r.yg)("inlineCode",{parentName:"p"},"onApplicationEvent()"),"."),(0,r.yg)("p",null,"During constructor instantiation."),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},"Read property configuration"),(0,r.yg)("li",{parentName:"ul"},"Start the thread pool"),(0,r.yg)("li",{parentName:"ul"},"Start the registry for registering with ",(0,r.yg)("inlineCode",{parentName:"li"},"shenyu-admin"))),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-java"},'public class ApacheDubboServiceBeanListener implements ApplicationListener<ContextRefreshedEvent> {\n\n    // ......\n\n    //Constructor\n    public ApacheDubboServiceBeanListener(final PropertiesConfig clientConfig, final ShenyuClientRegisterRepository shenyuClientRegisterRepository) {\n        //1.Read property configuration\n        Properties props = clientConfig.getProps();\n        String contextPath = props.getProperty(ShenyuClientConstants.CONTEXT_PATH);\n        String appName = props.getProperty(ShenyuClientConstants.APP_NAME);\n        if (StringUtils.isBlank(contextPath)) {\n            throw new ShenyuClientIllegalArgumentException("apache dubbo client must config the contextPath or appName");\n        }\n        this.contextPath = contextPath;\n        this.appName = appName;\n        this.host = props.getProperty(ShenyuClientConstants.HOST);\n        this.port = props.getProperty(ShenyuClientConstants.PORT);\n        //2.Start the thread pool\n        executorService = Executors.newSingleThreadExecutor(new ThreadFactoryBuilder().setNameFormat("shenyu-apache-dubbo-client-thread-pool-%d").build());\n        //3.Start the registry for registering with `shenyu-admin`\n        publisher.start(shenyuClientRegisterRepository);\n    }\n\n    /**\n     * Context refresh event, execute method logic\n     */\n    @Override\n    public void onApplicationEvent(final ContextRefreshedEvent contextRefreshedEvent) {\n        //......\n    }\n')),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},"ApacheDubboServiceBeanListener#onApplicationEvent()")),(0,r.yg)("p",null,"Rewritten method logic: read ",(0,r.yg)("inlineCode",{parentName:"p"},"Dubbo")," service ",(0,r.yg)("inlineCode",{parentName:"p"},"ServiceBean"),", build metadata object and ",(0,r.yg)("inlineCode",{parentName:"p"},"URI")," object, and register it with ",(0,r.yg)("inlineCode",{parentName:"p"},"shenyu-admin"),"."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-java"},"    @Override\n    public void onApplicationEvent(final ContextRefreshedEvent contextRefreshedEvent) {\n        //read ServiceBean\n        Map<String, ServiceBean> serviceBean = contextRefreshedEvent.getApplicationContext().getBeansOfType(ServiceBean.class);\n        if (serviceBean.isEmpty()) {\n            return;\n        }\n        //The method is guaranteed to be executed only once\n        if (!registered.compareAndSet(false, true)) {\n            return;\n        }\n        //handle metadata \n        for (Map.Entry<String, ServiceBean> entry : serviceBean.entrySet()) {\n            handler(entry.getValue());\n        }\n        //handle URI\n        serviceBean.values().stream().findFirst().ifPresent(bean -> {\n            publisher.publishEvent(buildURIRegisterDTO(bean));\n        });\n    }\n")),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("p",{parentName:"li"},"handler()"),(0,r.yg)("p",{parentName:"li"},"In the ",(0,r.yg)("inlineCode",{parentName:"p"},"handler()")," method, read all methods from the ",(0,r.yg)("inlineCode",{parentName:"p"},"serviceBean"),", determine if there is a ",(0,r.yg)("inlineCode",{parentName:"p"},"ShenyuDubboClient")," annotation on the method, build a metadata object if it exists, and register the method with ",(0,r.yg)("inlineCode",{parentName:"p"},"shenyu-admin")," through the registry."))),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-java"},"    private void handler(final ServiceBean<?> serviceBean) {\n        //get proxy\n        Object refProxy = serviceBean.getRef();\n        //get class\n        Class<?> clazz = refProxy.getClass();\n        if (AopUtils.isAopProxy(refProxy)) {\n            clazz = AopUtils.getTargetClass(refProxy);\n        }\n        //all methods\n        Method[] methods = ReflectionUtils.getUniqueDeclaredMethods(clazz);\n        for (Method method : methods) {\n            //read ShenyuDubboClient annotation\n            ShenyuDubboClient shenyuDubboClient = method.getAnnotation(ShenyuDubboClient.class);\n            if (Objects.nonNull(shenyuDubboClient)) {\n                //build meatdata and registry\n                publisher.publishEvent(buildMetaDataDTO(serviceBean, shenyuDubboClient, method));\n            }\n        }\n    }\n")),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("p",{parentName:"li"},"buildMetaDataDTO()"),(0,r.yg)("p",{parentName:"li"},"Constructs a metadata object where the necessary information for method registration is constructed and subsequently used for selector or rule matching."))),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-java"},'    private MetaDataRegisterDTO buildMetaDataDTO(final ServiceBean<?> serviceBean, final ShenyuDubboClient shenyuDubboClient, final Method method) {\n        //app name\n        String appName = buildAppName(serviceBean);\n        //path\n        String path = contextPath + shenyuDubboClient.path();\n        //desc\n        String desc = shenyuDubboClient.desc();\n        //service name\n        String serviceName = serviceBean.getInterface();\n        //rule name\n        String configRuleName = shenyuDubboClient.ruleName();\n        String ruleName = ("".equals(configRuleName)) ? path : configRuleName;\n        //method name \n        String methodName = method.getName();\n        //parameter Types\n        Class<?>[] parameterTypesClazz = method.getParameterTypes();\n        String parameterTypes = Arrays.stream(parameterTypesClazz).map(Class::getName).collect(Collectors.joining(","));\n        return MetaDataRegisterDTO.builder()\n                .appName(appName)\n                .serviceName(serviceName)\n                .methodName(methodName)\n                .contextPath(contextPath)\n                .host(buildHost())\n                .port(buildPort(serviceBean))\n                .path(path)\n                .ruleName(ruleName)\n                .pathDesc(desc)\n                .parameterTypes(parameterTypes)\n                .rpcExt(buildRpcExt(serviceBean)) //dubbo ext\n                .rpcType(RpcTypeEnum.DUBBO.getName())\n                .enabled(shenyuDubboClient.enabled())\n                .build();\n    }\n')),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("p",{parentName:"li"},"buildRpcExt()"),(0,r.yg)("p",{parentName:"li"}," ",(0,r.yg)("inlineCode",{parentName:"p"},"dubbo")," ext information."),(0,r.yg)("pre",{parentName:"li"},(0,r.yg)("code",{parentName:"pre",className:"language-java"},'   private String buildRpcExt(final ServiceBean serviceBean) {\n       DubboRpcExt build = DubboRpcExt.builder()\n               .group(StringUtils.isNotEmpty(serviceBean.getGroup()) ? serviceBean.getGroup() : "")//group\n               .version(StringUtils.isNotEmpty(serviceBean.getVersion()) ? serviceBean.getVersion() : "")//version\n               .loadbalance(StringUtils.isNotEmpty(serviceBean.getLoadbalance()) ? serviceBean.getLoadbalance() : Constants.DEFAULT_LOADBALANCE)//load balance\n               .retries(Objects.isNull(serviceBean.getRetries()) ? Constants.DEFAULT_RETRIES : serviceBean.getRetries())//retry\n               .timeout(Objects.isNull(serviceBean.getTimeout()) ? Constants.DEFAULT_CONNECT_TIMEOUT : serviceBean.getTimeout())//time\n               .sent(Objects.isNull(serviceBean.getSent()) ? Constants.DEFAULT_SENT : serviceBean.getSent())//sent\n               .cluster(StringUtils.isNotEmpty(serviceBean.getCluster()) ? serviceBean.getCluster() : Constants.DEFAULT_CLUSTER)//cluster\n               .url("")\n               .build();\n       return GsonUtils.getInstance().toJson(build);\n   }\n')))),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("p",{parentName:"li"},"buildURIRegisterDTO()"),(0,r.yg)("p",{parentName:"li"},"Construct ",(0,r.yg)("inlineCode",{parentName:"p"},"URI")," objects to register information about the service itself, which can be subsequently used for service probing live."))),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-java"},"private URIRegisterDTO buildURIRegisterDTO(final ServiceBean serviceBean) {\n        return URIRegisterDTO.builder()\n                .contextPath(this.contextPath) //context path\n                .appName(buildAppName(serviceBean))//app name\n                .rpcType(RpcTypeEnum.DUBBO.getName())//dubbo\n                .host(buildHost()) //host\n                .port(buildPort(serviceBean))//port\n                .build();\n }\n")),(0,r.yg)("p",null,"The specific registration logic is implemented by the registration center, please refer to ",(0,r.yg)("a",{parentName:"p",href:"https://shenyu.apache.org/zh/docs/design/register-center-design/"},"Client Access Principles")," ."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-java"},"//To the registration center, post registration events   \npublisher.publishEvent();\n")),(0,r.yg)("h4",{id:"13-processing-registration-information"},"1.3 Processing registration information"),(0,r.yg)("p",null,"The metadata and ",(0,r.yg)("inlineCode",{parentName:"p"},"URI")," data registered by the client through the registry are processed at the ",(0,r.yg)("inlineCode",{parentName:"p"},"shenyu-admin")," end, which is responsible for storing to the database and synchronizing to the ",(0,r.yg)("inlineCode",{parentName:"p"},"shenyu")," gateway. The client-side registration processing logic of the ",(0,r.yg)("inlineCode",{parentName:"p"},"Dubbo")," plugin is in the ",(0,r.yg)("inlineCode",{parentName:"p"},"ShenyuClientRegisterDubboServiceImpl"),". The inheritance relationship is as follows."),(0,r.yg)("p",null,(0,r.yg)("img",{src:t(11192).c})),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},"ShenyuClientRegisterService: client registration service, top-level interface."),(0,r.yg)("li",{parentName:"ul"},"FallbackShenyuClientRegisterService: registration failure, provides retry operation."),(0,r.yg)("li",{parentName:"ul"},"AbstractShenyuClientRegisterServiceImpl: abstract class, implements part of the public registration logic."),(0,r.yg)("li",{parentName:"ul"},"ShenyuClientRegisterDubboServiceImpl: implementation of the ",(0,r.yg)("inlineCode",{parentName:"li"},"Dubbo")," plugin registration.")),(0,r.yg)("h5",{id:"131-registration-service"},"1.3.1 Registration Service"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("p",{parentName:"li"},"org.apache.shenyu.admin.service.register.AbstractShenyuClientRegisterServiceImpl#register()"),(0,r.yg)("p",{parentName:"li"},"The metadata ",(0,r.yg)("inlineCode",{parentName:"p"},"MetaDataRegisterDTO")," object registered by the client through the registry is picked up and dropped in the ",(0,r.yg)("inlineCode",{parentName:"p"},"register()")," method of ",(0,r.yg)("inlineCode",{parentName:"p"},"shenyu-admin"),"."))),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-java"},"   @Override\n    public String register(final MetaDataRegisterDTO dto) {\n        //1. register selector\n        String selectorHandler = selectorHandler(dto);\n        String selectorId = selectorService.registerDefault(dto, PluginNameAdapter.rpcTypeAdapter(rpcType()), selectorHandler);\n        //2. register rule\n        String ruleHandler = ruleHandler();\n        RuleDTO ruleDTO = buildRpcDefaultRuleDTO(selectorId, dto, ruleHandler);\n        ruleService.registerDefault(ruleDTO);\n        //3. register metadata\n        registerMetadata(dto);\n        //4. register contextPath\n        String contextPath = dto.getContextPath();\n        if (StringUtils.isNotEmpty(contextPath)) {\n            registerContextPath(dto);\n        }\n        return ShenyuResultMessage.SUCCESS;\n    }\n")),(0,r.yg)("h6",{id:"1311-register-selector"},"1.3.1.1 Register Selector"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},"org.apache.shenyu.admin.service.impl.SelectorServiceImpl#registerDefault()")),(0,r.yg)("p",null,"Construct ",(0,r.yg)("inlineCode",{parentName:"p"},"contextPath"),", find if the selector information exists, if it does, return ",(0,r.yg)("inlineCode",{parentName:"p"},"id"),"; if it doesn't, create the default selector information."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-java"},"    @Override\n    public String registerDefault(final MetaDataRegisterDTO dto, final String pluginName, final String selectorHandler) {\n        // build contextPath\n        String contextPath = ContextPathUtils.buildContextPath(dto.getContextPath(), dto.getAppName());\n        // Find if selector information exists by name\n        SelectorDO selectorDO = findByNameAndPluginName(contextPath, pluginName);\n        if (Objects.isNull(selectorDO)) {\n            // Create a default selector message if it does not exist\n            return registerSelector(contextPath, pluginName, selectorHandler);\n        }\n        return selectorDO.getId();\n    }\n")),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("p",{parentName:"li"},"Default selector information"),(0,r.yg)("p",{parentName:"li"},"Construct the default selector information and its conditional properties here."))),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-java"},"   //register selector\n   private String registerSelector(final String contextPath, final String pluginName, final String selectorHandler) {\n        //build selector\n        SelectorDTO selectorDTO = buildSelectorDTO(contextPath, pluginMapper.selectByName(pluginName).getId());\n        selectorDTO.setHandle(selectorHandler);\n        //register default selector\n        return registerDefault(selectorDTO);\n    }\n     //build selector\n    private SelectorDTO buildSelectorDTO(final String contextPath, final String pluginId) {\n        //build default\n        SelectorDTO selectorDTO = buildDefaultSelectorDTO(contextPath);\n        selectorDTO.setPluginId(pluginId);\n         //build the conditional properties of the default selector\n        selectorDTO.setSelectorConditions(buildDefaultSelectorConditionDTO(contextPath));\n        return selectorDTO;\n    }\n")),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},"Build default selector")),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-java"},"private SelectorDTO buildDefaultSelectorDTO(final String name) {\n    return SelectorDTO.builder()\n            .name(name) // name\n            .type(SelectorTypeEnum.CUSTOM_FLOW.getCode()) // default type cutom\n            .matchMode(MatchModeEnum.AND.getCode()) //default match mode\n            .enabled(Boolean.TRUE)  //enable\n            .loged(Boolean.TRUE)  //log\n            .continued(Boolean.TRUE) \n            .sort(1) \n            .build();\n}\n")),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},"Build default selector conditional properties")),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-java"},'private List<SelectorConditionDTO> buildDefaultSelectorConditionDTO(final String contextPath) {\n    SelectorConditionDTO selectorConditionDTO = new SelectorConditionDTO();\n    selectorConditionDTO.setParamType(ParamTypeEnum.URI.getName()); // default URI\n    selectorConditionDTO.setParamName("/");\n    selectorConditionDTO.setOperator(OperatorEnum.MATCH.getAlias()); // default  match\n    selectorConditionDTO.setParamValue(contextPath + AdminConstants.URI_SUFFIX); \n    return Collections.singletonList(selectorConditionDTO);\n}\n')),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},"Register default selector")),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-java"},"@Override\npublic String registerDefault(final SelectorDTO selectorDTO) {\n    //selector information\n    SelectorDO selectorDO = SelectorDO.buildSelectorDO(selectorDTO);\n    //selector conditional properties\n    List<SelectorConditionDTO> selectorConditionDTOs = selectorDTO.getSelectorConditions();\n    if (StringUtils.isEmpty(selectorDTO.getId())) {\n        // insert selector information into the database\n        selectorMapper.insertSelective(selectorDO);\n          // inserting selector conditional properties to the database\n        selectorConditionDTOs.forEach(selectorConditionDTO -> {\n            selectorConditionDTO.setSelectorId(selectorDO.getId());            \n            selectorConditionMapper.insertSelective(SelectorConditionDO.buildSelectorConditionDO(selectorConditionDTO));\n        });\n    }\n    // Publish synchronization events to synchronize selection information and its conditional attributes to the gateway\n    publishEvent(selectorDO, selectorConditionDTOs);\n    return selectorDO.getId();\n}\n")),(0,r.yg)("h6",{id:"1312-registration-rules"},"1.3.1.2 Registration Rules"),(0,r.yg)("p",null,"In the second step of registering the service, start building the default rules and then register the rules."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-java"},"@Override\n    public String register(final MetaDataRegisterDTO dto) {\n        //1. handle selector\n        //......\n        \n        //2. handle rule\n        \n        String ruleHandler = ruleHandler();\n        // build default rule\n        RuleDTO ruleDTO = buildRpcDefaultRuleDTO(selectorId, dto, ruleHandler);\n        // register rule\n        ruleService.registerDefault(ruleDTO);\n        \n        //3. reigster metadata\n        //......\n        \n        //4. register ContextPath\n        //......\n        \n        return ShenyuResultMessage.SUCCESS;\n    }\n")),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},"\u9ed8\u8ba4\u89c4\u5219\u5904\u7406\u5c5e\u6027")),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-java"},"    @Override\n    protected String ruleHandler() {\n        // default rule\n        return new DubboRuleHandle().toJson();\n    }\n")),(0,r.yg)("p",null,(0,r.yg)("inlineCode",{parentName:"p"},"Dubbo")," plugin default rule handling properties."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-java"},"public class DubboRuleHandle implements RuleHandle {\n\n    /**\n     * dubbo version.\n     */\n    private String version;\n\n    /**\n     * group.\n     */\n    private String group;\n\n    /**\n     * retry.\n     */\n    private Integer retries = 0;\n\n    /**\n     * loadbalance:RANDOM\n     */\n    private String loadbalance = LoadBalanceEnum.RANDOM.getName();\n\n    /**\n     * timeout default 3000\n     */\n    private long timeout = Constants.TIME_OUT;\n}\n")),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},"build default rule")),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-java"},'  // build default rule\n    private RuleDTO buildRpcDefaultRuleDTO(final String selectorId, final MetaDataRegisterDTO metaDataDTO, final String ruleHandler) {\n        return buildRuleDTO(selectorId, ruleHandler, metaDataDTO.getRuleName(), metaDataDTO.getPath());\n    }\n   //  build default rule\n    private RuleDTO buildRuleDTO(final String selectorId, final String ruleHandler, final String ruleName, final String path) {\n        RuleDTO ruleDTO = RuleDTO.builder()\n                .selectorId(selectorId)\n                .name(ruleName) \n                .matchMode(MatchModeEnum.AND.getCode()) \n                .enabled(Boolean.TRUE) \n                .loged(Boolean.TRUE) \n                .sort(1)\n                .handle(ruleHandler)\n                .build();\n        RuleConditionDTO ruleConditionDTO = RuleConditionDTO.builder()\n                .paramType(ParamTypeEnum.URI.getName()) \n                .paramName("/")\n                .paramValue(path) \n                .build();\n        if (path.indexOf("*") > 1) {\n            ruleConditionDTO.setOperator(OperatorEnum.MATCH.getAlias()); \n        } else {\n            ruleConditionDTO.setOperator(OperatorEnum.EQ.getAlias()); \n        }\n        ruleDTO.setRuleConditions(Collections.singletonList(ruleConditionDTO));\n        return ruleDTO;\n    }\n')),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},"org.apache.shenyu.admin.service.impl.RuleServiceImpl#registerDefault()")),(0,r.yg)("p",null,"Registration rules: insert records to the database and publish events to the gateway for data synchronization."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-java"},'\n    @Override\n    public String registerDefault(final RuleDTO ruleDTO) {\n        RuleDO exist = ruleMapper.findBySelectorIdAndName(ruleDTO.getSelectorId(), ruleDTO.getName());\n        if (Objects.nonNull(exist)) {\n            return "";\n        }\n\n        RuleDO ruleDO = RuleDO.buildRuleDO(ruleDTO);\n        List<RuleConditionDTO> ruleConditions = ruleDTO.getRuleConditions();\n        if (StringUtils.isEmpty(ruleDTO.getId())) {\n            // insert rule information into the database\n            ruleMapper.insertSelective(ruleDO);\n            //insert  rule body conditional attributes into the database\n            ruleConditions.forEach(ruleConditionDTO -> {\n                ruleConditionDTO.setRuleId(ruleDO.getId());     \n                ruleConditionMapper.insertSelective(RuleConditionDO.buildRuleConditionDO(ruleConditionDTO));\n            });\n        }\n        // Publish events to the gateway for data synchronization\n        publishEvent(ruleDO, ruleConditions);\n        return ruleDO.getId();\n    }\n\n')),(0,r.yg)("h6",{id:"1313-register-metadata"},"1.3.1.3 Register Metadata"),(0,r.yg)("p",null,"Metadata is mainly used for ",(0,r.yg)("inlineCode",{parentName:"p"},"RPC")," service calls."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-java"},"   @Override\n    public String register(final MetaDataRegisterDTO dto) {\n        //1. register selector\n        //......\n        \n        //2. register rule\n        //......\n        \n        //3. register metadata\n        registerMetadata(dto);\n        \n        //4. register ContextPath\n        //......\n        \n        return ShenyuResultMessage.SUCCESS;\n    }\n")),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("p",{parentName:"li"},"org.apache.shenyu.admin.service.register.ShenyuClientRegisterDubboServiceImpl#registerMetadata()"),(0,r.yg)("p",{parentName:"li"},"Insert or update metadata and then publish sync events to the gateway."))),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-java"},"    @Override\n    protected void registerMetadata(final MetaDataRegisterDTO dto) {\n            // get metaDataService\n            MetaDataService metaDataService = getMetaDataService();\n            MetaDataDO exist = metaDataService.findByPath(dto.getPath());\n            //insert or update metadata\n            metaDataService.saveOrUpdateMetaData(exist, dto);\n    }\n\n    @Override\n    public void saveOrUpdateMetaData(final MetaDataDO exist, final MetaDataRegisterDTO metaDataDTO) {\n        DataEventTypeEnum eventType;\n        // DTO->DO\n        MetaDataDO metaDataDO = MetaDataTransfer.INSTANCE.mapRegisterDTOToEntity(metaDataDTO);\n        // insert data\n        if (Objects.isNull(exist)) {\n            Timestamp currentTime = new Timestamp(System.currentTimeMillis());\n            metaDataDO.setId(UUIDUtils.getInstance().generateShortUuid());\n            metaDataDO.setDateCreated(currentTime);\n            metaDataDO.setDateUpdated(currentTime);\n            metaDataMapper.insert(metaDataDO);\n            eventType = DataEventTypeEnum.CREATE;\n        } else {\n            // update\n            metaDataDO.setId(exist.getId());\n            metaDataMapper.update(metaDataDO);\n            eventType = DataEventTypeEnum.UPDATE;\n        }\n        // Publish sync events to gateway\n        eventPublisher.publishEvent(new DataChangedEvent(ConfigGroupEnum.META_DATA, eventType,\n                Collections.singletonList(MetaDataTransfer.INSTANCE.mapToData(metaDataDO))));\n    }\n")),(0,r.yg)("h5",{id:"132-register-uri"},"1.3.2 Register URI"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},"org.apache.shenyu.admin.service.register.FallbackShenyuClientRegisterService#registerURI()")),(0,r.yg)("p",null,"The server side receives the ",(0,r.yg)("inlineCode",{parentName:"p"},"URI")," information registered by the client and processes it."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-java"},'    @Override\n    public String registerURI(final String selectorName, final List<URIRegisterDTO> uriList) {\n        String result;\n        String key = key(selectorName);\n        try {\n            this.removeFallBack(key);\n            // register URI\n            result = this.doRegisterURI(selectorName, uriList);\n            logger.info("Register success: {},{}", selectorName, uriList);\n        } catch (Exception ex) {\n            logger.warn("Register exception: cause:{}", ex.getMessage());\n            result = "";\n            // Retry after registration failure\n            this.addFallback(key, new FallbackHolder(selectorName, uriList));\n        }\n        return result;\n    }\n')),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},"org.apache.shenyu.admin.service.register.AbstractShenyuClientRegisterServiceImpl#doRegisterURI()")),(0,r.yg)("p",null,"Get a valid ",(0,r.yg)("inlineCode",{parentName:"p"},"URI")," from the ",(0,r.yg)("inlineCode",{parentName:"p"},"URI")," registered by the client, update the corresponding selector ",(0,r.yg)("inlineCode",{parentName:"p"},"handle")," property, and send a selector update event to the gateway."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-java"},'@Override\n    public String doRegisterURI(final String selectorName, final List<URIRegisterDTO> uriList) {\n        //check\n        if (CollectionUtils.isEmpty(uriList)) {\n            return "";\n        }\n        \n        SelectorDO selectorDO = selectorService.findByNameAndPluginName(selectorName, PluginNameAdapter.rpcTypeAdapter(rpcType()));\n        if (Objects.isNull(selectorDO)) {\n            throw new ShenyuException("doRegister Failed to execute,wait to retry.");\n        }\n        // gte valid URI\n        List<URIRegisterDTO> validUriList = uriList.stream().filter(dto -> Objects.nonNull(dto.getPort()) && StringUtils.isNotBlank(dto.getHost())).collect(Collectors.toList());\n        // build handle\n        String handler = buildHandle(validUriList, selectorDO);\n        if (handler != null) {\n            selectorDO.setHandle(handler);\n            SelectorData selectorData = selectorService.buildByName(selectorName, PluginNameAdapter.rpcTypeAdapter(rpcType()));\n            selectorData.setHandle(handler);\n            // Update the handle property of the selector to the database\n            selectorService.updateSelective(selectorDO);\n            // Send selector update events to the gateway\n            eventPublisher.publishEvent(new DataChangedEvent(ConfigGroupEnum.SELECTOR, DataEventTypeEnum.UPDATE, Collections.singletonList(selectorData)));\n        }\n        return ShenyuResultMessage.SUCCESS;\n    }\n')),(0,r.yg)("p",null,"The source code analysis on service registration is completed as well as the analysis flow chart is as follows."),(0,r.yg)("p",null,(0,r.yg)("img",{src:t(19216).c})),(0,r.yg)("p",null,"The next step is to analyze how the ",(0,r.yg)("inlineCode",{parentName:"p"},"dubbo")," plugin initiates calls to the ",(0,r.yg)("inlineCode",{parentName:"p"},"http")," service based on this information."),(0,r.yg)("h3",{id:"2-service-invocation"},"2. Service Invocation"),(0,r.yg)("p",null,"The ",(0,r.yg)("inlineCode",{parentName:"p"},"dubbo")," plugin is the core processing plugin used by the ",(0,r.yg)("inlineCode",{parentName:"p"},"ShenYu")," gateway to convert ",(0,r.yg)("inlineCode",{parentName:"p"},"http")," requests into the ",(0,r.yg)("inlineCode",{parentName:"p"},"dubbo protocol")," and invoke the ",(0,r.yg)("inlineCode",{parentName:"p"},"dubbo")," service."),(0,r.yg)("p",null,"Take the case provided by the official website ",(0,r.yg)("a",{parentName:"p",href:"https://shenyu.apache.org/docs/quick-start/quick-start-dubbo/"},"Quick Start with Dubbo")," as an example, a ",(0,r.yg)("inlineCode",{parentName:"p"},"dubbo")," service is registered with ",(0,r.yg)("inlineCode",{parentName:"p"},"shenyu-admin")," through the registry, and then requested through the ",(0,r.yg)("inlineCode",{parentName:"p"},"ShenYu")," gateway proxy, the request is as follows."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre"},"GET http://localhost:9195/dubbo/findById?id=100\nAccept: application/json\n")),(0,r.yg)("p",null,"The class inheritance relationship in the ",(0,r.yg)("inlineCode",{parentName:"p"},"Dubbo")," plugin is as follows."),(0,r.yg)("p",null,(0,r.yg)("img",{src:t(63968).c})),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},"ShenyuPlugin: top-level interface, defining interface methods."),(0,r.yg)("li",{parentName:"ul"},"AbstractShenyuPlugin: abstract class that implements plugin common logic."),(0,r.yg)("li",{parentName:"ul"},"AbstractDubboPlugin: dubbo plugin abstract class, implementing ",(0,r.yg)("inlineCode",{parentName:"li"},"dubbo")," common logic."),(0,r.yg)("li",{parentName:"ul"},"ApacheDubboPlugin: ApacheDubbo plugin.")),(0,r.yg)("blockquote",null,(0,r.yg)("p",{parentName:"blockquote"},"ShenYu Gateway supports ApacheDubbo and AlibabaDubbo\\")),(0,r.yg)("h4",{id:"21-receive-requests"},"2.1 Receive requests"),(0,r.yg)("p",null,"After passing the ",(0,r.yg)("inlineCode",{parentName:"p"},"ShenYu")," gateway proxy, the request entry is ",(0,r.yg)("inlineCode",{parentName:"p"},"ShenyuWebHandler"),", which implements the ",(0,r.yg)("inlineCode",{parentName:"p"},"org.springframework.web.server.WebHandler")," interface."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-java"},"public final class ShenyuWebHandler implements WebHandler, ApplicationListener<SortPluginEvent> {\n    //......\n    \n    /**\n     * hanlde request\n     */\n    @Override\n    public Mono<Void> handle(@NonNull final ServerWebExchange exchange) {\n       // execute default plugin chain\n        Mono<Void> execute = new DefaultShenyuPluginChain(plugins).execute(exchange);\n        if (scheduled) {\n            return execute.subscribeOn(scheduler);\n        }\n        return execute;\n    }\n    \n    private static class DefaultShenyuPluginChain implements ShenyuPluginChain {\n\n        private int index;\n\n        private final List<ShenyuPlugin> plugins;\n\n  \n        DefaultShenyuPluginChain(final List<ShenyuPlugin> plugins) {\n            this.plugins = plugins;\n        }\n\n        /**\n         * execute.\n         */\n        @Override\n        public Mono<Void> execute(final ServerWebExchange exchange) {\n            return Mono.defer(() -> {\n                if (this.index < plugins.size()) {\n                    // get plugin \n                    ShenyuPlugin plugin = plugins.get(this.index++);\n                    boolean skip = plugin.skip(exchange);\n                    if (skip) {\n                        // next\n                        return this.execute(exchange);\n                    }\n                    // execute\n                    return plugin.execute(exchange, this);\n                }\n                return Mono.empty();\n            });\n        }\n    }\n}\n")),(0,r.yg)("h4",{id:"22-match-rule"},"2.2 Match Rule"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},"org.apache.shenyu.plugin.base.AbstractShenyuPlugin#execute()")),(0,r.yg)("p",null,"Execute the matching logic for selectors and rules in the ",(0,r.yg)("inlineCode",{parentName:"p"},"execute()")," method."),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},"Matching selectors."),(0,r.yg)("li",{parentName:"ul"},"Matching rules."),(0,r.yg)("li",{parentName:"ul"},"Execute the plugin.")),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-java"},"@Override\n    public Mono<Void> execute(final ServerWebExchange exchange, final ShenyuPluginChain chain) {\n        // plugin name\n        String pluginName = named();\n        // plugin data\n        PluginData pluginData = BaseDataCache.getInstance().obtainPluginData(pluginName);\n        if (pluginData != null && pluginData.getEnabled()) {\n            // selector data\n            final Collection<SelectorData> selectors = BaseDataCache.getInstance().obtainSelectorData(pluginName);\n            if (CollectionUtils.isEmpty(selectors)) {\n                return handleSelectorIfNull(pluginName, exchange, chain);\n            }\n            // match selector\n            SelectorData selectorData = matchSelector(exchange, selectors);\n            if (Objects.isNull(selectorData)) {\n                return handleSelectorIfNull(pluginName, exchange, chain);\n            }\n            selectorLog(selectorData, pluginName);\n            // rule data\n            List<RuleData> rules = BaseDataCache.getInstance().obtainRuleData(selectorData.getId());\n            if (CollectionUtils.isEmpty(rules)) {\n                return handleRuleIfNull(pluginName, exchange, chain);\n            }\n            // match rule\n            RuleData rule;\n            if (selectorData.getType() == SelectorTypeEnum.FULL_FLOW.getCode()) {\n                //get last\n                rule = rules.get(rules.size() - 1);\n            } else {\n                rule = matchRule(exchange, rules);\n            }\n            if (Objects.isNull(rule)) {\n                return handleRuleIfNull(pluginName, exchange, chain);\n            }\n            ruleLog(rule, pluginName);\n            // execute\n            return doExecute(exchange, chain, selectorData, rule);\n        }\n        return chain.execute(exchange);\n    }\n")),(0,r.yg)("h4",{id:"23-execute-globalplugin"},"2.3 Execute GlobalPlugin"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},"org.apache.shenyu.plugin.global.GlobalPlugin#execute()")),(0,r.yg)("p",null,(0,r.yg)("inlineCode",{parentName:"p"},"GlobalPlugin")," is a global plugin that constructs contextual information in the ",(0,r.yg)("inlineCode",{parentName:"p"},"execute()")," method."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-java"},"public class GlobalPlugin implements ShenyuPlugin {\n    // shenyu context\n    private final ShenyuContextBuilder builder;\n    \n    //......\n    \n    @Override\n    public Mono<Void> execute(final ServerWebExchange exchange, final ShenyuPluginChain chain) {\n       // build context information to be passed into the exchange\n        ShenyuContext shenyuContext = builder.build(exchange);\n        exchange.getAttributes().put(Constants.CONTEXT, shenyuContext);\n        return chain.execute(exchange);\n    }\n    \n    //......\n}\n")),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},"org.apache.shenyu.plugin.global.DefaultShenyuContextBuilder#build()")),(0,r.yg)("p",null,"Build the default context information."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-java"},"public class DefaultShenyuContextBuilder implements ShenyuContextBuilder {\n    //......\n    \n    @Override\n    public ShenyuContext build(final ServerWebExchange exchange) {\n        //build data\n        Pair<String, MetaData> buildData = buildData(exchange);\n        //wrap ShenyuContext\n        return decoratorMap.get(buildData.getLeft()).decorator(buildDefaultContext(exchange.getRequest()), buildData.getRight());\n    }\n    \n    private Pair<String, MetaData> buildData(final ServerWebExchange exchange) {\n        //......\n        //get the metadata according to the requested uri\n        MetaData metaData = MetaDataCache.getInstance().obtain(request.getURI().getPath());\n        if (Objects.nonNull(metaData) && Boolean.TRUE.equals(metaData.getEnabled())) {\n            exchange.getAttributes().put(Constants.META_DATA, metaData);\n            return Pair.of(metaData.getRpcType(), metaData);\n        } else {\n            return Pair.of(RpcTypeEnum.HTTP.getName(), new MetaData());\n        }\n    }\n    //set the default context information\n    private ShenyuContext buildDefaultContext(final ServerHttpRequest request) {\n        String appKey = request.getHeaders().getFirst(Constants.APP_KEY);\n        String sign = request.getHeaders().getFirst(Constants.SIGN);\n        String timestamp = request.getHeaders().getFirst(Constants.TIMESTAMP);\n        ShenyuContext shenyuContext = new ShenyuContext();\n        String path = request.getURI().getPath();\n        shenyuContext.setPath(path); \n        shenyuContext.setAppKey(appKey);\n        shenyuContext.setSign(sign);\n        shenyuContext.setTimestamp(timestamp);\n        shenyuContext.setStartDateTime(LocalDateTime.now());\n        Optional.ofNullable(request.getMethod()).ifPresent(httpMethod -> shenyuContext.setHttpMethod(httpMethod.name()));\n        return shenyuContext;\n    }\n }\n")),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},"org.apache.shenyu.plugin.dubbo.common.context.DubboShenyuContextDecorator#decorator()")),(0,r.yg)("p",null,"wrap ",(0,r.yg)("inlineCode",{parentName:"p"},"ShenyuContext"),":"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-java"},"public class DubboShenyuContextDecorator implements ShenyuContextDecorator {\n    \n    @Override\n    public ShenyuContext decorator(final ShenyuContext shenyuContext, final MetaData metaData) {\n        shenyuContext.setModule(metaData.getAppName());\n        shenyuContext.setMethod(metaData.getServiceName()); \n        shenyuContext.setContextPath(metaData.getContextPath()); \n        shenyuContext.setRpcType(RpcTypeEnum.DUBBO.getName()); \n        return shenyuContext;\n    }\n    \n    @Override\n    public String rpcType() {\n        return RpcTypeEnum.DUBBO.getName();\n    }\n}\n")),(0,r.yg)("h4",{id:"24-execute-rpcparamtransformplugin"},"2.4 Execute RpcParamTransformPlugin"),(0,r.yg)("p",null,"The ",(0,r.yg)("inlineCode",{parentName:"p"},"RpcParamTransformPlugin")," is responsible for reading the parameters from the ",(0,r.yg)("inlineCode",{parentName:"p"},"http")," request, saving them in the ",(0,r.yg)("inlineCode",{parentName:"p"},"exchange")," and passing them to the ",(0,r.yg)("inlineCode",{parentName:"p"},"rpc")," service."),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},"org.apache.shenyu.plugin.base.RpcParamTransformPlugin#execute()")),(0,r.yg)("p",null,"In the ",(0,r.yg)("inlineCode",{parentName:"p"},"execute()")," method, the core logic of the plugin is executed: get the request information from ",(0,r.yg)("inlineCode",{parentName:"p"},"exchange")," and process the parameters according to the form of content passed in by the request."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-java"},"public class RpcParamTransformPlugin implements ShenyuPlugin {\n\n    @Override\n    public Mono<Void> execute(final ServerWebExchange exchange, final ShenyuPluginChain chain) {\n        //get request information from exchange\n        ServerHttpRequest request = exchange.getRequest();\n        ShenyuContext shenyuContext = exchange.getAttribute(Constants.CONTEXT);\n        if (Objects.nonNull(shenyuContext)) {\n           // APPLICATION_JSON\n            MediaType mediaType = request.getHeaders().getContentType();\n            if (MediaType.APPLICATION_JSON.isCompatibleWith(mediaType)) {\n                return body(exchange, request, chain);\n            }\n            // APPLICATION_FORM_URLENCODED\n            if (MediaType.APPLICATION_FORM_URLENCODED.isCompatibleWith(mediaType)) {\n                return formData(exchange, request, chain);\n            }\n            //query\n            return query(exchange, request, chain);\n        }\n        return chain.execute(exchange);\n    }\n    \n    //APPLICATION_JSON\n    private Mono<Void> body(final ServerWebExchange exchange, final ServerHttpRequest serverHttpRequest, final ShenyuPluginChain chain) {\n        return Mono.from(DataBufferUtils.join(serverHttpRequest.getBody())\n                .flatMap(body -> {\n                    exchange.getAttributes().put(Constants.PARAM_TRANSFORM, resolveBodyFromRequest(body));//\u89e3\u6790body\uff0c\u4fdd\u5b58\u5230exchange\u4e2d\n                    return chain.execute(exchange);\n                }));\n    }\n   // APPLICATION_FORM_URLENCODED\n    private Mono<Void> formData(final ServerWebExchange exchange, final ServerHttpRequest serverHttpRequest, final ShenyuPluginChain chain) {\n        return Mono.from(DataBufferUtils.join(serverHttpRequest.getBody())\n                .flatMap(map -> {\n                    String param = resolveBodyFromRequest(map);\n                    LinkedMultiValueMap<String, String> linkedMultiValueMap;\n                    try {\n                        linkedMultiValueMap = BodyParamUtils.buildBodyParams(URLDecoder.decode(param, StandardCharsets.UTF_8.name())); //\u683c\u5f0f\u5316\u6570\u636e\n                    } catch (UnsupportedEncodingException e) {\n                        return Mono.error(e);\n                    }\n                    exchange.getAttributes().put(Constants.PARAM_TRANSFORM, HttpParamConverter.toMap(() -> linkedMultiValueMap));// \u4fdd\u5b58\u5230exchange\u4e2d\n                    return chain.execute(exchange);\n                }));\n    }\n    //query\n    private Mono<Void> query(final ServerWebExchange exchange, final ServerHttpRequest serverHttpRequest, final ShenyuPluginChain chain) {\n        exchange.getAttributes().put(Constants.PARAM_TRANSFORM, HttpParamConverter.ofString(() -> serverHttpRequest.getURI().getQuery()));//\u4fdd\u5b58\u5230exchange\u4e2d\n        return chain.execute(exchange);\n    }\n    //......\n }\n")),(0,r.yg)("h4",{id:"25-execute-dubboplugin"},"2.5 Execute DubboPlugin"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},"org.apache.shenyu.plugin.dubbo.common.AbstractDubboPlugin#doExecute()")),(0,r.yg)("p",null,"In the ",(0,r.yg)("inlineCode",{parentName:"p"},"doExecute()")," method, the main purpose is to check the metadata and parameters."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-java"},'public abstract class AbstractDubboPlugin extends AbstractShenyuPlugin {\n    \n    @Override\n    public Mono<Void> doExecute(final ServerWebExchange exchange,\n                                   final ShenyuPluginChain chain,\n                                   final SelectorData selector,\n                                   final RuleData rule) {\n        //param\n        String param = exchange.getAttribute(Constants.PARAM_TRANSFORM);\n        //context\n        ShenyuContext shenyuContext = exchange.getAttribute(Constants.CONTEXT);\n        assert shenyuContext != null;\n        //metaData\n        MetaData metaData = exchange.getAttribute(Constants.META_DATA);\n        //check metaData\n        if (!checkMetaData(metaData)) {\n            LOG.error(" path is : {}, meta data have error : {}", shenyuContext.getPath(), metaData);\n            exchange.getResponse().setStatusCode(HttpStatus.INTERNAL_SERVER_ERROR);\n            Object error = ShenyuResultWrap.error(exchange, ShenyuResultEnum.META_DATA_ERROR, null);\n            return WebFluxResultUtils.result(exchange, error);\n        }\n        //check\n        if (Objects.nonNull(metaData) && StringUtils.isNoneBlank(metaData.getParameterTypes()) && StringUtils.isBlank(param)) {\n            exchange.getResponse().setStatusCode(HttpStatus.INTERNAL_SERVER_ERROR);\n            Object error = ShenyuResultWrap.error(exchange, ShenyuResultEnum.DUBBO_HAVE_BODY_PARAM, null);\n            return WebFluxResultUtils.result(exchange, error);\n        }\n        //set rpcContext\n        this.rpcContext(exchange);\n        //dubbo invoke\n        return this.doDubboInvoker(exchange, chain, selector, rule, metaData, param);\n    }\n}\n')),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},"org.apache.shenyu.plugin.apache.dubbo.ApacheDubboPlugin#doDubboInvoker()")),(0,r.yg)("p",null,"Set special context information in the ",(0,r.yg)("inlineCode",{parentName:"p"},"doDubboInvoker()")," method, and then start the dubbo generalization call."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-java"},"public class ApacheDubboPlugin extends AbstractDubboPlugin {\n    \n    @Override\n    protected Mono<Void> doDubboInvoker(final ServerWebExchange exchange,\n                                        final ShenyuPluginChain chain,\n                                        final SelectorData selector,\n                                        final RuleData rule,\n                                        final MetaData metaData,\n                                        final String param) {\n        //set the current selector and rule information, and request address for dubbo graying support\n        RpcContext.getContext().setAttachment(Constants.DUBBO_SELECTOR_ID, selector.getId());\n        RpcContext.getContext().setAttachment(Constants.DUBBO_RULE_ID, rule.getId());\n        RpcContext.getContext().setAttachment(Constants.DUBBO_REMOTE_ADDRESS, Objects.requireNonNull(exchange.getRequest().getRemoteAddress()).getAddress().getHostAddress());\n        //dubbo generic invoker\n        final Mono<Object> result = dubboProxyService.genericInvoker(param, metaData, exchange);\n        //execute next plugin in chain\n        return result.then(chain.execute(exchange));\n    }\n}\n")),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},"org.apache.shenyu.plugin.apache.dubbo.proxy.ApacheDubboProxyService#genericInvoker()")),(0,r.yg)("p",null,(0,r.yg)("inlineCode",{parentName:"p"},"genericInvoker()")," method."),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},"Gets the ",(0,r.yg)("inlineCode",{parentName:"li"},"ReferenceConfig")," object."),(0,r.yg)("li",{parentName:"ul"},"Gets the generalization service ",(0,r.yg)("inlineCode",{parentName:"li"},"GenericService")," object."),(0,r.yg)("li",{parentName:"ul"},"Constructs the request parameter ",(0,r.yg)("inlineCode",{parentName:"li"},"pair")," object."),(0,r.yg)("li",{parentName:"ul"},"Initiates an asynchronous generalization invocation.")),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-java"},"public class ApacheDubboProxyService {\n    //...... \n\n    /**\n     * Generic invoker object.\n     */\n    public Mono<Object> genericInvoker(final String body, final MetaData metaData, final ServerWebExchange exchange) throws ShenyuException {\n        //1.Get the ReferenceConfig object\n        ReferenceConfig<GenericService> reference = ApacheDubboConfigCache.getInstance().get(metaData.getPath());\n\n        if (Objects.isNull(reference) || StringUtils.isEmpty(reference.getInterface())) {\n            //Failure of the current cache information\n            ApacheDubboConfigCache.getInstance().invalidate(metaData.getPath());\n            //Reinitialization with metadata\n            reference = ApacheDubboConfigCache.getInstance().initRef(metaData);\n        }\n        //2.Get the GenericService object of the generalization service\n        GenericService genericService = reference.get();\n        //3.Constructing the request parameter pair object\n        Pair<String[], Object[]> pair;\n        if (StringUtils.isBlank(metaData.getParameterTypes()) || ParamCheckUtils.dubboBodyIsEmpty(body)) {\n            pair = new ImmutablePair<>(new String[]{}, new Object[]{});\n        } else {\n            pair = dubboParamResolveService.buildParameter(body, metaData.getParameterTypes());\n        }\n        //4.Initiating asynchronous generalization calls\n        return Mono.fromFuture(invokeAsync(genericService, metaData.getMethodName(), pair.getLeft(), pair.getRight()).thenApply(ret -> {\n            //handle result\n            if (Objects.isNull(ret)) {\n                ret = Constants.DUBBO_RPC_RESULT_EMPTY;\n            }\n            exchange.getAttributes().put(Constants.RPC_RESULT, ret);\n            exchange.getAttributes().put(Constants.CLIENT_RESPONSE_RESULT_TYPE, ResultEnum.SUCCESS.getName());\n            return ret;\n        })).onErrorMap(exception -> exception instanceof GenericException ? new ShenyuException(((GenericException) exception).getExceptionMessage()) : new ShenyuException(exception));//\u5904\u7406\u5f02\u5e38\n    }\n    \n    //Generalized calls, asynchronous operations\n    private CompletableFuture<Object> invokeAsync(final GenericService genericService, final String method, final String[] parameterTypes, final Object[] args) throws GenericException {\n        genericService.$invoke(method, parameterTypes, args);\n        Object resultFromFuture = RpcContext.getContext().getFuture();\n        return resultFromFuture instanceof CompletableFuture ? (CompletableFuture<Object>) resultFromFuture : CompletableFuture.completedFuture(resultFromFuture);\n    }\n}\n\n")),(0,r.yg)("p",null,"Calling the ",(0,r.yg)("inlineCode",{parentName:"p"},"dubbo")," service at the gateway can be achieved by generalizing the call."),(0,r.yg)("p",null,"The ",(0,r.yg)("inlineCode",{parentName:"p"},"ReferenceConfig")," object is the key object to support generalization calls , and its initialization operation is done during data synchronization. There are two parts of data involved here, one is the synchronized plugin ",(0,r.yg)("inlineCode",{parentName:"p"},"handler")," information and the other is the synchronized plugin metadata information."),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},"org.apache.shenyu.plugin.dubbo.common.handler.AbstractDubboPluginDataHandler#handlerPlugin()")),(0,r.yg)("p",null,"When the plugin data is updated, the data synchronization module synchronizes the data from ",(0,r.yg)("inlineCode",{parentName:"p"},"shenyu-admin")," to the gateway. The initialization operation is performed in ",(0,r.yg)("inlineCode",{parentName:"p"},"handlerPlugin()"),"."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-java"},"public abstract class AbstractDubboPluginDataHandler implements PluginDataHandler {\n    //......\n    \n    //Initializing the configuration cache\n   protected abstract void initConfigCache(DubboRegisterConfig dubboRegisterConfig);\n\n    @Override\n    public void handlerPlugin(final PluginData pluginData) {\n        if (Objects.nonNull(pluginData) && Boolean.TRUE.equals(pluginData.getEnabled())) {\n            //Data deserialization\n            DubboRegisterConfig dubboRegisterConfig = GsonUtils.getInstance().fromJson(pluginData.getConfig(), DubboRegisterConfig.class);\n            DubboRegisterConfig exist = Singleton.INST.get(DubboRegisterConfig.class);\n            if (Objects.isNull(dubboRegisterConfig)) {\n                return;\n            }\n            if (Objects.isNull(exist) || !dubboRegisterConfig.equals(exist)) {\n                // Perform initialization operations\n                this.initConfigCache(dubboRegisterConfig);\n            }\n            Singleton.INST.single(DubboRegisterConfig.class, dubboRegisterConfig);\n        }\n    }\n    //......\n}\n")),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},"org.apache.shenyu.plugin.apache.dubbo.handler.ApacheDubboPluginDataHandler#initConfigCache()")),(0,r.yg)("p",null,"Perform initialization operations."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-java"},"public class ApacheDubboPluginDataHandler extends AbstractDubboPluginDataHandler {\n\n    @Override\n    protected void initConfigCache(final DubboRegisterConfig dubboRegisterConfig) {\n        //perform initialization operations\n        ApacheDubboConfigCache.getInstance().init(dubboRegisterConfig);\n        //cached results before failure\n        ApacheDubboConfigCache.getInstance().invalidateAll();\n    }\n}\n\n")),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},"org.apache.shenyu.plugin.apache.dubbo.cache.ApacheDubboConfigCache#init()")),(0,r.yg)("p",null,"In the initialization, set ",(0,r.yg)("inlineCode",{parentName:"p"},"registryConfig")," and ",(0,r.yg)("inlineCode",{parentName:"p"},"consumerConfig"),"."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-java"},'public final class ApacheDubboConfigCache extends DubboConfigCache {\n    //......  \n   /**\n     * init\n     */\n    public void init(final DubboRegisterConfig dubboRegisterConfig) {\n        //ApplicationConfig\n        if (Objects.isNull(applicationConfig)) {\n            applicationConfig = new ApplicationConfig("shenyu_proxy");\n        }\n        //When the protocol or address changes, you need to update the registryConfig\n        if (needUpdateRegistryConfig(dubboRegisterConfig)) {\n            RegistryConfig registryConfigTemp = new RegistryConfig();\n            registryConfigTemp.setProtocol(dubboRegisterConfig.getProtocol());\n            registryConfigTemp.setId("shenyu_proxy");\n            registryConfigTemp.setRegister(false);\n            registryConfigTemp.setAddress(dubboRegisterConfig.getRegister());            Optional.ofNullable(dubboRegisterConfig.getGroup()).ifPresent(registryConfigTemp::setGroup);\n            registryConfig = registryConfigTemp;\n        }\n        //ConsumerConfig\n        if (Objects.isNull(consumerConfig)) {\n            consumerConfig = ApplicationModel.getConfigManager().getDefaultConsumer().orElseGet(() -> {\n                ConsumerConfig consumerConfig = new ConsumerConfig();\n                consumerConfig.refresh();\n                return consumerConfig;\n            });\n           \n            //ConsumerConfig\n            Optional.ofNullable(dubboRegisterConfig.getThreadpool()).ifPresent(consumerConfig::setThreadpool); \n            Optional.ofNullable(dubboRegisterConfig.getCorethreads()).ifPresent(consumerConfig::setCorethreads);\n            Optional.ofNullable(dubboRegisterConfig.getThreads()).ifPresent(consumerConfig::setThreads);\n            Optional.ofNullable(dubboRegisterConfig.getQueues()).ifPresent(consumerConfig::setQueues);\n        }\n    }\n    \n    //Does the registration configuration need to be updated\n    private boolean needUpdateRegistryConfig(final DubboRegisterConfig dubboRegisterConfig) {\n        if (Objects.isNull(registryConfig)) {\n            return true;\n        }\n        return !Objects.equals(dubboRegisterConfig.getProtocol(), registryConfig.getProtocol())\n                || !Objects.equals(dubboRegisterConfig.getRegister(), registryConfig.getAddress())\n                || !Objects.equals(dubboRegisterConfig.getProtocol(), registryConfig.getProtocol());\n    }\n\n    //......\n}\n')),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},"org.apache.shenyu.plugin.apache.dubbo.subscriber.ApacheDubboMetaDataSubscriber#onSubscribe()")),(0,r.yg)("p",null,"When the metadata is updated, the data synchronization module synchronizes the data from ",(0,r.yg)("inlineCode",{parentName:"p"},"shenyu-admin")," to the gateway. The metadata update operation is performed in the ",(0,r.yg)("inlineCode",{parentName:"p"},"onSubscribe()")," method."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-java"},"public class ApacheDubboMetaDataSubscriber implements MetaDataSubscriber {\n    //local memory cache\n    private static final ConcurrentMap<String, MetaData> META_DATA = Maps.newConcurrentMap();\n\n    //update metaData\n    public void onSubscribe(final MetaData metaData) {\n        // dubbo\n        if (RpcTypeEnum.DUBBO.getName().equals(metaData.getRpcType())) {\n            //Whether the corresponding metadata exists\n            MetaData exist = META_DATA.get(metaData.getPath());\n            if (Objects.isNull(exist) || Objects.isNull(ApacheDubboConfigCache.getInstance().get(metaData.getPath()))) {\n                // initRef\n                ApacheDubboConfigCache.getInstance().initRef(metaData);\n            } else {\n                // The corresponding metadata has undergone an update operation\n                if (!Objects.equals(metaData.getServiceName(), exist.getServiceName())\n                        || !Objects.equals(metaData.getRpcExt(), exist.getRpcExt())\n                        || !Objects.equals(metaData.getParameterTypes(), exist.getParameterTypes())\n                        || !Objects.equals(metaData.getMethodName(), exist.getMethodName())) {\n                    //Build ReferenceConfig again based on the latest metadata\n                    ApacheDubboConfigCache.getInstance().build(metaData);\n                }\n            }\n            //local memory cache\n            META_DATA.put(metaData.getPath(), metaData);\n        }\n    }\n\n    //dalete\n    public void unSubscribe(final MetaData metaData) {\n        if (RpcTypeEnum.DUBBO.getName().equals(metaData.getRpcType())) {\n            //\u4f7fReferenceConfig\u5931\u6548\n            ApacheDubboConfigCache.getInstance().invalidate(metaData.getPath());\n            META_DATA.remove(metaData.getPath());\n        }\n    }\n}\n")),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},"org.apache.shenyu.plugin.apache.dubbo.cache.ApacheDubboConfigCache#initRef()")),(0,r.yg)("p",null,"Build ",(0,r.yg)("inlineCode",{parentName:"p"},"ReferenceConfig")," objects from ",(0,r.yg)("inlineCode",{parentName:"p"},"metaData"),"."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-java"},'public final class ApacheDubboConfigCache extends DubboConfigCache {\n    //......\n    \n    public ReferenceConfig<GenericService> initRef(final MetaData metaData) {\n            try {\n                //First try to get it from the cache, and return it directly if it exists\n                ReferenceConfig<GenericService> referenceConfig = cache.get(metaData.getPath());\n                if (StringUtils.isNoneBlank(referenceConfig.getInterface())) {\n                    return referenceConfig;\n                }\n            } catch (ExecutionException e) {\n                LOG.error("init dubbo ref exception", e);\n            }\n          \n            //build if not exist\n            return build(metaData);\n        }\n\n        /**\n         * Build reference config.\n         */\n        @SuppressWarnings("deprecation")\n        public ReferenceConfig<GenericService> build(final MetaData metaData) {\n            if (Objects.isNull(applicationConfig) || Objects.isNull(registryConfig)) {\n                return new ReferenceConfig<>();\n            }\n            ReferenceConfig<GenericService> reference = new ReferenceConfig<>(); //ReferenceConfig\n            reference.setGeneric("true"); //generic invoke\n            reference.setAsync(true);//async\n\n            reference.setApplication(applicationConfig);//applicationConfig\n            reference.setRegistry(registryConfig);//registryConfig\n            reference.setConsumer(consumerConfig);//consumerConfig\n            reference.setInterface(metaData.getServiceName());//serviceName\n            reference.setProtocol("dubbo");//dubbo\n            reference.setCheck(false); \n            reference.setLoadbalance("gray");//gray\n\n            Map<String, String> parameters = new HashMap<>(2);\n            parameters.put("dispatcher", "direct");\n            reference.setParameters(parameters);\n\n            String rpcExt = metaData.getRpcExt();//rpc ext param\n            DubboParam dubboParam = parserToDubboParam(rpcExt);\n            if (Objects.nonNull(dubboParam)) {\n                if (StringUtils.isNoneBlank(dubboParam.getVersion())) {\n                    reference.setVersion(dubboParam.getVersion());//version\n                }\n                if (StringUtils.isNoneBlank(dubboParam.getGroup())) {\n                    reference.setGroup(dubboParam.getGroup());//group\n                }\n                if (StringUtils.isNoneBlank(dubboParam.getUrl())) {\n                    reference.setUrl(dubboParam.getUrl());//url\n                }\n                if (StringUtils.isNoneBlank(dubboParam.getCluster())) {\n                    reference.setCluster(dubboParam.getCluster());\n                }\n                Optional.ofNullable(dubboParam.getTimeout()).ifPresent(reference::setTimeout);//timeout\n                Optional.ofNullable(dubboParam.getRetries()).ifPresent(reference::setRetries);//retires\n                Optional.ofNullable(dubboParam.getSent()).ifPresent(reference::setSent);//Whether to ack async-sent\n            }\n            try {\n                //get GenericService\n                Object obj = reference.get();\n                if (Objects.nonNull(obj)) {\n                    LOG.info("init apache dubbo reference success there meteData is :{}", metaData);\n                    //cache reference\n                    cache.put(metaData.getPath(), reference);\n                }\n            } catch (Exception e) {\n                LOG.error("init apache dubbo reference exception", e);\n            }\n            return reference;\n        }\n    //......\n    }\n')),(0,r.yg)("h4",{id:"26-execute-responseplugin"},"2.6 Execute ResponsePlugin"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},"org.apache.shenyu.plugin.response.ResponsePlugin#execute()")),(0,r.yg)("p",null,"The response results are handled by the ",(0,r.yg)("inlineCode",{parentName:"p"},"ResponsePlugin")," plugin."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-java"},"    @Override\n    public Mono<Void> execute(final ServerWebExchange exchange, final ShenyuPluginChain chain) {\n        ShenyuContext shenyuContext = exchange.getAttribute(Constants.CONTEXT);\n        assert shenyuContext != null;\n        // handle results according to rpc type\n        return writerMap.get(shenyuContext.getRpcType()).writeWith(exchange, chain);\n    }\n")),(0,r.yg)("p",null,"The processing type is determined by ",(0,r.yg)("inlineCode",{parentName:"p"},"MessageWriter")," and the class inheritance relationship is as follows."),(0,r.yg)("p",null,(0,r.yg)("img",{src:t(3436).c})),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},"MessageWriter: interface, defining message processing methods."),(0,r.yg)("li",{parentName:"ul"},"NettyClientMessageWriter: processing of ",(0,r.yg)("inlineCode",{parentName:"li"},"Netty")," call results."),(0,r.yg)("li",{parentName:"ul"},"RPCMessageWriter: processing the results of ",(0,r.yg)("inlineCode",{parentName:"li"},"RPC")," calls."),(0,r.yg)("li",{parentName:"ul"},"WebClientMessageWriter: processing the results of ",(0,r.yg)("inlineCode",{parentName:"li"},"WebClient")," calls.")),(0,r.yg)("p",null,(0,r.yg)("inlineCode",{parentName:"p"},"Dubbo")," service call, the processing result is ",(0,r.yg)("inlineCode",{parentName:"p"},"RPCMessageWriter")," of course."),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},"org.apache.shenyu.plugin.response.strategy.RPCMessageWriter#writeWith()")),(0,r.yg)("p",null,"Process the response results in the ",(0,r.yg)("inlineCode",{parentName:"p"},"writeWith()")," method."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-java"},"\npublic class RPCMessageWriter implements MessageWriter {\n\n    @Override\n    public Mono<Void> writeWith(final ServerWebExchange exchange, final ShenyuPluginChain chain) {\n        return chain.execute(exchange).then(Mono.defer(() -> {\n            Object result = exchange.getAttribute(Constants.RPC_RESULT); //result\n            if (Objects.isNull(result)) { \n                Object error = ShenyuResultWrap.error(exchange, ShenyuResultEnum.SERVICE_RESULT_ERROR, null);\n                return WebFluxResultUtils.result(exchange, error);\n            }\n            return WebFluxResultUtils.result(exchange, result);\n        }));\n    }\n}\n")),(0,r.yg)("p",null,"At this point in the analysis, the source code analysis of the ",(0,r.yg)("inlineCode",{parentName:"p"},"Dubbo")," plugin is complete, and the analysis flow chart is as follows."),(0,r.yg)("p",null,(0,r.yg)("img",{src:t(56672).c})),(0,r.yg)("h3",{id:"3-summary"},"3. Summary"),(0,r.yg)("p",null,"The source code analysis in this article starts from ",(0,r.yg)("inlineCode",{parentName:"p"},"Dubbo")," service registration to ",(0,r.yg)("inlineCode",{parentName:"p"},"Dubbo")," plug-in service calls. The ",(0,r.yg)("inlineCode",{parentName:"p"},"Dubbo")," plugin is mainly used to handle the conversion of ",(0,r.yg)("inlineCode",{parentName:"p"},"http")," requests to the ",(0,r.yg)("inlineCode",{parentName:"p"},"dubbo")," protocol, and the main logic is implemented through generalized calls."))}c.isMDXComponent=!0},63968:(e,n,t)=>{t.d(n,{c:()=>a});const a=t.p+"assets/images/ApacheDubboPlugin-286a36694f3fa121e7d3c7d67d08b833.png"},3436:(e,n,t)=>{t.d(n,{c:()=>a});const a=t.p+"assets/images/MessageWriter-81d10e88b3d5524b1eb2737c238956a6.png"},11192:(e,n,t)=>{t.d(n,{c:()=>a});const a=t.p+"assets/images/ShenyuClientRegisterDubboServiceImpl-a48cc4b745cb6a47ee000cf08d4cff04.png"},56672:(e,n,t)=>{t.d(n,{c:()=>a});const a=t.p+"assets/images/dubbo-execute-en-230f6fe5b81c0ab5d10ed68025c16020.png"},19216:(e,n,t)=>{t.d(n,{c:()=>a});const a=t.p+"assets/images/dubbo-register-en-37db6c1d92c1763193e88e60de554e93.png"}}]);