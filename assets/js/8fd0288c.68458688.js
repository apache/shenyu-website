"use strict";(self.webpackChunkshenyu_website=self.webpackChunkshenyu_website||[]).push([[89772],{15680:(e,t,n)=>{n.d(t,{xA:()=>u,yg:()=>y});var r=n(96540);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter(function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable})),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach(function(t){i(e,t,n[t])}):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach(function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))})}return e}function s(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var l=r.createContext({}),c=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},u=function(e){var t=c(e.components);return r.createElement(l.Provider,{value:t},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},g=r.forwardRef(function(e,t){var n=e.components,i=e.mdxType,a=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),p=c(n),g=i,y=p["".concat(l,".").concat(g)]||p[g]||d[g]||a;return n?r.createElement(y,o(o({ref:t},u),{},{components:n})):r.createElement(y,o({ref:t},u))});function y(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=n.length,o=new Array(a);o[0]=g;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[p]="string"==typeof e?e:i,o[1]=s;for(var c=2;c<a;c++)o[c]=n[c];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}g.displayName="MDXCreateElement"},16304:(e,t,n)=>{n.d(t,{A:()=>r});const r=n.p+"assets/images/idea-http-test-local-bd2ea4b9e8ab5d867edc120e3946e00c.png"},34994:(e,t,n)=>{n.d(t,{A:()=>r});const r=n.p+"assets/images/postman-test-1bd985bc5b3dbe25e90f5c01d2ee1094.png"},48111:(e,t,n)=>{n.r(t),n.d(t,{contentTitle:()=>o,default:()=>p,frontMatter:()=>a,metadata:()=>s,toc:()=>l});var r=n(58168),i=(n(96540),n(15680));const a={title:"Quick start with Spring Cloud",description:"Quick start with SpringCloud"},o=void 0,s={unversionedId:"quick-start/quick-start-springcloud",id:"quick-start/quick-start-springcloud",isDocsHomePage:!1,title:"Quick start with Spring Cloud",description:"Quick start with SpringCloud",source:"@site/docs/quick-start/quick-start-springcloud.md",sourceDirName:"quick-start",slug:"/quick-start/quick-start-springcloud",permalink:"/docs/next/quick-start/quick-start-springcloud",editUrl:"https://github.com/apache/shenyu-website/edit/main/docs/quick-start/quick-start-springcloud.md",version:"current",frontMatter:{title:"Quick start with Spring Cloud",description:"Quick start with SpringCloud"},sidebar:"tutorialSidebar",previous:{title:"Quick start with Sofa",permalink:"/docs/next/quick-start/quick-start-sofa"},next:{title:"Quick start with Tars",permalink:"/docs/next/quick-start/quick-start-tars"}},l=[{value:"Environment to prepare",id:"environment-to-prepare",children:[]},{value:"Startup sequence",id:"startup-sequence",children:[]},{value:"Run <code>shenyu-examples-springcloud</code>",id:"run-shenyu-examples-springcloud",children:[]},{value:"Configure the registration center related information on the admin side",id:"configure-the-registration-center-related-information-on-the-admin-side",children:[]},{value:"Run the shenyu-examples-springcloud project",id:"run-the-shenyu-examples-springcloud-project",children:[]},{value:"Test",id:"test",children:[]}],c={toc:l},u="wrapper";function p({components:e,...t}){return(0,i.yg)(u,(0,r.A)({},c,t,{components:e,mdxType:"MDXLayout"}),(0,i.yg)("p",null,"This document introduces how to quickly access the Apache ShenYu gateway using Spring Cloud. You can get the code example of this document by clicking ",(0,i.yg)("a",{parentName:"p",href:"https://github.com/apache/shenyu/tree/master/shenyu-examples/shenyu-examples-springcloud"},"here")," ."),(0,i.yg)("h2",{id:"environment-to-prepare"},"Environment to prepare"),(0,i.yg)("p",null,"Please refer to the operation and maintenance deployment content and choose a way to start ",(0,i.yg)("inlineCode",{parentName:"p"},"shenyu-admin"),". For example, start the ",(0,i.yg)("inlineCode",{parentName:"p"},"Apache ShenYu")," backend management system through ",(0,i.yg)("a",{parentName:"p",href:"../deployment/deployment-local"},"local deployment"),"."),(0,i.yg)("p",null,"To start the gateway, if it is through source code, directly run ",(0,i.yg)("inlineCode",{parentName:"p"},"ShenyuBootstrapApplication")," in ",(0,i.yg)("inlineCode",{parentName:"p"},"shenyu-bootstrap"),"."),(0,i.yg)("h2",{id:"startup-sequence"},"Startup sequence"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"Start ",(0,i.yg)("inlineCode",{parentName:"li"},"shenyu-admin")),(0,i.yg)("li",{parentName:"ul"},"Start ",(0,i.yg)("inlineCode",{parentName:"li"},"shenyu-bootstrap")),(0,i.yg)("li",{parentName:"ul"},"Start the registration center, such as the ",(0,i.yg)("inlineCode",{parentName:"li"},"eureka")," project under ",(0,i.yg)("inlineCode",{parentName:"li"},"shenyu-examples")),(0,i.yg)("li",{parentName:"ul"},"Configure ",(0,i.yg)("inlineCode",{parentName:"li"},"shenyu-examples-springcloud")," registration discovery")),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-yaml"},"shenyu:\n  discovery:\n    enable: true\n    type: eureka\n    serverList: ${eureka.client.serviceUrl.defaultZone}\n    registerPath: ${spring.application.name}\n    props:\n      nacosNameSpace: ShenyuRegisterCenter\n")),(0,i.yg)("h2",{id:"run-shenyu-examples-springcloud"},"Run ",(0,i.yg)("inlineCode",{parentName:"h2"},"shenyu-examples-springcloud")),(0,i.yg)("h2",{id:"configure-the-registration-center-related-information-on-the-admin-side"},"Configure the registration center related information on the admin side"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"Currently, the SpringCloudPlugin plugin on Shenyu implements support for service discovery of the registry center. However, it is not possible to dynamically switch the registry center. In order to allow users to use the plugin more clearly and switch the configuration of the registry center more conveniently, shenyu supports developers to configure and switch the registry center on the admin page, thereby reducing the user's usage cost and experience.")),(0,i.yg)("p",null,"Specific operation process:"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"Start shenyu-admin"),(0,i.yg)("li",{parentName:"ul"},"Start shenyu-bootstrap"),(0,i.yg)("li",{parentName:"ul"},"Start the registry center, such as the eureka project under shenyu-examples"),(0,i.yg)("li",{parentName:"ul"},"Start shenyu-examples-springcloud under shenyu-examples"),(0,i.yg)("li",{parentName:"ul"},"Configure the relevant information of the registry center on the admin system interface and click Confirm")),(0,i.yg)("p",null,"Take the eureka registry center configuration as an example to show how to configure the relevant information of the registry center on the page:"),(0,i.yg)("img",{src:"/img/shenyu/quick-start/springcloud/springCloud-dynamic-register-operate-en.png",width:"60%",height:"50%"}),(0,i.yg)("p",null,"As shown in the figure above, registerType indicates the type of registration center, and the following registration centers are supported:"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"eureka"),(0,i.yg)("li",{parentName:"ul"},"nacos"),(0,i.yg)("li",{parentName:"ul"},"zookeeper"),(0,i.yg)("li",{parentName:"ul"},"apollo"),(0,i.yg)("li",{parentName:"ul"},"consul"),(0,i.yg)("li",{parentName:"ul"},"etcd"),(0,i.yg)("li",{parentName:"ul"},"polaris"),(0,i.yg)("li",{parentName:"ul"},"kubernetes")),(0,i.yg)("p",null,"serverLists indicates the IP address of the registration center, and props is the additional configuration items for the registration center, such as namespace, username, etc. After clicking OK, eureka is used as the registration center of springCloudPlugin."),(0,i.yg)("h2",{id:"run-the-shenyu-examples-springcloud-project"},"Run the shenyu-examples-springcloud project"),(0,i.yg)("p",null,"In the example project we used ",(0,i.yg)("inlineCode",{parentName:"p"},"Eureka")," as the registry for ",(0,i.yg)("inlineCode",{parentName:"p"},"Spring Cloud"),". You can use the local ",(0,i.yg)("inlineCode",{parentName:"p"},"Eureka")," or the application provided in the example."),(0,i.yg)("p",null,"Download ",(0,i.yg)("a",{parentName:"p",href:"https://github.com/apache/shenyu/tree/master/shenyu-examples/shenyu-examples-eureka"},"shenyu-examples-eureka")," \u3001",(0,i.yg)("a",{parentName:"p",href:"https://github.com/apache/shenyu/tree/master/shenyu-examples/shenyu-examples-springcloud"},"shenyu-examples-springcloud")," ."),(0,i.yg)("p",null,"Startup the Eureka service:\nExecute the ",(0,i.yg)("inlineCode",{parentName:"p"},"org.apache.shenyu.examples.eureka.EurekaServerApplication")," main method to start project."),(0,i.yg)("p",null,"Startup the Spring Cloud service:\nExecute the ",(0,i.yg)("inlineCode",{parentName:"p"},"org.apache.shenyu.examples.springcloud.ShenyuTestSpringCloudApplication")," main method to start project."),(0,i.yg)("p",null,"The following log appears when the startup is successful:"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-shell"},'2021-02-10 14:03:51.301  INFO 2860 --- [           main] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService \'applicationTaskExecutor\'\n2021-02-10 14:03:51.669  INFO 2860 --- [pool-1-thread-1] o.d.s.client.common.utils.RegisterUtils  : springCloud client register success: {"appName":"springCloud-test","context":"/springcloud","path":"/springcloud/order/save","pathDesc":"","rpcType":"springCloud","ruleName":"/springcloud/order/save","enabled":true} \n2021-02-10 14:03:51.676  INFO 2860 --- [pool-1-thread-1] o.d.s.client.common.utils.RegisterUtils  : springCloud client register success: {"appName":"springCloud-test","context":"/springcloud","path":"/springcloud/order/path/**","pathDesc":"","rpcType":"springCloud","ruleName":"/springcloud/order/path/**","enabled":true} \n2021-02-10 14:03:51.682  INFO 2860 --- [pool-1-thread-1] o.d.s.client.common.utils.RegisterUtils  : springCloud client register success: {"appName":"springCloud-test","context":"/springcloud","path":"/springcloud/order/findById","pathDesc":"","rpcType":"springCloud","ruleName":"/springcloud/order/findById","enabled":true} \n2021-02-10 14:03:51.688  INFO 2860 --- [pool-1-thread-1] o.d.s.client.common.utils.RegisterUtils  : springCloud client register success: {"appName":"springCloud-test","context":"/springcloud","path":"/springcloud/order/path/**/name","pathDesc":"","rpcType":"springCloud","ruleName":"/springcloud/order/path/**/name","enabled":true} \n2021-02-10 14:03:51.692  INFO 2860 --- [pool-1-thread-1] o.d.s.client.common.utils.RegisterUtils  : springCloud client register success: {"appName":"springCloud-test","context":"/springcloud","path":"/springcloud/test/**","pathDesc":"","rpcType":"springCloud","ruleName":"/springcloud/test/**","enabled":true} \n2021-02-10 14:03:52.806  WARN 2860 --- [           main] ockingLoadBalancerClientRibbonWarnLogger : You already have RibbonLoadBalancerClient on your classpath. It will be used by default. As Spring Cloud Ribbon is in maintenance mode. We recommend switching to BlockingLoadBalancerClient instead. In order to use it, set the value of `spring.cloud.loadbalancer.ribbon.enabled` to `false` or remove spring-cloud-starter-netflix-ribbon from your project.\n2021-02-10 14:03:52.848  WARN 2860 --- [           main] iguration$LoadBalancerCaffeineWarnLogger : Spring Cloud LoadBalancer is currently working with default default cache. You can switch to using Caffeine cache, by adding it to the classpath.\n2021-02-10 14:03:52.921  INFO 2860 --- [           main] o.s.c.n.eureka.InstanceInfoFactory       : Setting initial instance status as: STARTING\n2021-02-10 14:03:52.949  INFO 2860 --- [           main] com.netflix.discovery.DiscoveryClient    : Initializing Eureka in region us-east-1\n2021-02-10 14:03:53.006  INFO 2860 --- [           main] c.n.d.provider.DiscoveryJerseyProvider   : Using JSON encoding codec LegacyJacksonJson\n2021-02-10 14:03:53.006  INFO 2860 --- [           main] c.n.d.provider.DiscoveryJerseyProvider   : Using JSON decoding codec LegacyJacksonJson\n2021-02-10 14:03:53.110  INFO 2860 --- [           main] c.n.d.provider.DiscoveryJerseyProvider   : Using XML encoding codec XStreamXml\n2021-02-10 14:03:53.110  INFO 2860 --- [           main] c.n.d.provider.DiscoveryJerseyProvider   : Using XML decoding codec XStreamXml\n2021-02-10 14:03:53.263  INFO 2860 --- [           main] c.n.d.s.r.aws.ConfigClusterResolver      : Resolving eureka endpoints via configuration\n2021-02-10 14:03:53.546  INFO 2860 --- [           main] com.netflix.discovery.DiscoveryClient    : Disable delta property : false\n2021-02-10 14:03:53.546  INFO 2860 --- [           main] com.netflix.discovery.DiscoveryClient    : Single vip registry refresh property : null\n2021-02-10 14:03:53.547  INFO 2860 --- [           main] com.netflix.discovery.DiscoveryClient    : Force full registry fetch : false\n2021-02-10 14:03:53.547  INFO 2860 --- [           main] com.netflix.discovery.DiscoveryClient    : Application is null : false\n2021-02-10 14:03:53.547  INFO 2860 --- [           main] com.netflix.discovery.DiscoveryClient    : Registered Applications size is zero : true\n2021-02-10 14:03:53.547  INFO 2860 --- [           main] com.netflix.discovery.DiscoveryClient    : Application version is -1: true\n2021-02-10 14:03:53.547  INFO 2860 --- [           main] com.netflix.discovery.DiscoveryClient    : Getting all instance registry info from the eureka server\n2021-02-10 14:03:53.754  INFO 2860 --- [           main] com.netflix.discovery.DiscoveryClient    : The response status is 200\n2021-02-10 14:03:53.756  INFO 2860 --- [           main] com.netflix.discovery.DiscoveryClient    : Starting heartbeat executor: renew interval is: 30\n2021-02-10 14:03:53.758  INFO 2860 --- [           main] c.n.discovery.InstanceInfoReplicator     : InstanceInfoReplicator onDemand update allowed rate per min is 4\n2021-02-10 14:03:53.761  INFO 2860 --- [           main] com.netflix.discovery.DiscoveryClient    : Discovery Client initialized at timestamp 1612937033760 with initial instances count: 0\n2021-02-10 14:03:53.762  INFO 2860 --- [           main] o.s.c.n.e.s.EurekaServiceRegistry        : Registering application SPRINGCLOUD-TEST with eureka with status UP\n2021-02-10 14:03:53.763  INFO 2860 --- [           main] com.netflix.discovery.DiscoveryClient    : Saw local status change event StatusChangeEvent [timestamp=1612937033763, current=UP, previous=STARTING]\n2021-02-10 14:03:53.765  INFO 2860 --- [nfoReplicator-0] com.netflix.discovery.DiscoveryClient    : DiscoveryClient_SPRINGCLOUD-TEST/host.docker.internal:springCloud-test:8884: registering service...\n2021-02-10 14:03:53.805  INFO 2860 --- [           main] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8884 (http) with context path \'\'\n2021-02-10 14:03:53.807  INFO 2860 --- [           main] .s.c.n.e.s.EurekaAutoServiceRegistration : Updating port to 8884\n2021-02-10 14:03:53.837  INFO 2860 --- [nfoReplicator-0] com.netflix.discovery.DiscoveryClient    : DiscoveryClient_SPRINGCLOUD-TEST/host.docker.internal:springCloud-test:8884 - registration status: 204\n2021-02-10 14:03:54.231  INFO 2860 --- [           main] o.d.s.e.s.ShenyuTestSpringCloudApplication : Started ShenyuTestSpringCloudApplication in 6.338 seconds (JVM running for 7.361) \n')),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"After starting ",(0,i.yg)("inlineCode",{parentName:"li"},"shenyu-examples-springcloud")),(0,i.yg)("li",{parentName:"ul"},"You can see the newly registered data on the ",(0,i.yg)("inlineCode",{parentName:"li"},"divide")," plugin of the admin system")),(0,i.yg)("h2",{id:"test"},"Test"),(0,i.yg)("p",null,"The ",(0,i.yg)("inlineCode",{parentName:"p"},"shenyu-examples-springcloud")," project will automatically register interface methods annotated with ",(0,i.yg)("inlineCode",{parentName:"p"},"@ShenyuSpringMvcClient")," in the Apache ShenYu gateway after successful startup."),(0,i.yg)("p",null,(0,i.yg)("img",{src:n(61530).A})),(0,i.yg)("p",null,"Use PostMan to simulate HTTP to request your SpringCloud service:"),(0,i.yg)("p",null,(0,i.yg)("img",{src:n(34994).A})),(0,i.yg)("p",null,"Use IDEA HTTP Client Plugin to simulate HTTP to request your SpringCloud service","[local:no Shenyu proxy]",":"),(0,i.yg)("p",null,(0,i.yg)("img",{src:n(16304).A})),(0,i.yg)("p",null,"Use IDEA HTTP Client Plugin to simulate HTTP to request your SpringCloud service","[Shenyu proxy]",":"),(0,i.yg)("p",null,(0,i.yg)("img",{src:n(90705).A})))}p.isMDXComponent=!0},61530:(e,t,n)=>{n.d(t,{A:()=>r});const r=n.p+"assets/images/rule-list-9a66ac71f764e2766fb7880c1811bae2.png"},90705:(e,t,n)=>{n.d(t,{A:()=>r});const r=n.p+"assets/images/idea-http-test-proxy-fc83eddb6fa4a74cc790258ac670a8ec.png"}}]);