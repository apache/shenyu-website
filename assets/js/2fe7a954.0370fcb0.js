"use strict";(self.webpackChunkshenyu_website=self.webpackChunkshenyu_website||[]).push([[43366],{15680:(e,r,t)=>{t.d(r,{xA:()=>u,yg:()=>c});var n=t(96540);function a(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function i(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);r&&(n=n.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,n)}return t}function o(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?i(Object(t),!0).forEach((function(r){a(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function l(e,r){if(null==e)return{};var t,n,a=function(e,r){if(null==e)return{};var t,n,a={},i=Object.keys(e);for(n=0;n<i.length;n++)t=i[n],r.indexOf(t)>=0||(a[t]=e[t]);return a}(e,r);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)t=i[n],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var s=n.createContext({}),p=function(e){var r=n.useContext(s),t=r;return e&&(t="function"==typeof e?e(r):o(o({},r),e)),t},u=function(e){var r=p(e.components);return n.createElement(s.Provider,{value:r},e.children)},g="mdxType",d={inlineCode:"code",wrapper:function(e){var r=e.children;return n.createElement(n.Fragment,{},r)}},y=n.forwardRef((function(e,r){var t=e.components,a=e.mdxType,i=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),g=p(t),y=a,c=g["".concat(s,".").concat(y)]||g[y]||d[y]||i;return t?n.createElement(c,o(o({ref:r},u),{},{components:t})):n.createElement(c,o({ref:r},u))}));function c(e,r){var t=arguments,a=r&&r.mdxType;if("string"==typeof e||a){var i=t.length,o=new Array(i);o[0]=y;var l={};for(var s in r)hasOwnProperty.call(r,s)&&(l[s]=r[s]);l.originalType=e,l[g]="string"==typeof e?e:a,o[1]=l;for(var p=2;p<i;p++)o[p]=t[p];return n.createElement.apply(null,o)}return n.createElement.apply(null,t)}y.displayName="MDXCreateElement"},29021:(e,r,t)=>{t.r(r),t.d(r,{contentTitle:()=>o,default:()=>g,frontMatter:()=>i,metadata:()=>l,toc:()=>s});var n=t(58168),a=(t(96540),t(15680));const i={sidebar_position:2,title:"Integrate Http with soul gateway",keywords:["soul"],description:"Integrate Http with soul gateway"},o=void 0,l={unversionedId:"users-guide/http-proxy",id:"version-2.3.0-Legacy/users-guide/http-proxy",isDocsHomePage:!1,title:"Integrate Http with soul gateway",description:"Integrate Http with soul gateway",source:"@site/versioned_docs/version-2.3.0-Legacy/users-guide/http-proxy.md",sourceDirName:"users-guide",slug:"/users-guide/http-proxy",permalink:"/docs/2.3.0-Legacy/users-guide/http-proxy",editUrl:"https://github.com/apache/shenyu-website/edit/main/versioned_docs/version-2.3.0-Legacy/users-guide/http-proxy.md",version:"2.3.0-Legacy",sidebarPosition:2,frontMatter:{sidebar_position:2,title:"Integrate Http with soul gateway",keywords:["soul"],description:"Integrate Http with soul gateway"},sidebar:"version-2.3.0-Legacy/tutorialSidebar",previous:{title:"Environment Setup",permalink:"/docs/2.3.0-Legacy/users-guide/soul-set-up"},next:{title:"Integrate dubbo with soul gateway",permalink:"/docs/2.3.0-Legacy/users-guide/dubbo-proxy"}},s=[{value:"Features",id:"features",children:[]},{value:"Configure soul gateway as Http proxy.",id:"configure-soul-gateway-as-http-proxy",children:[]},{value:"Http request via soul gateway\uff08springMVC user\uff09",id:"http-request-via-soul-gatewayspringmvc-user",children:[]},{value:"Configure soul gateway as an Http proxy\uff08other framework\uff09",id:"configure-soul-gateway-as-an-http-proxyother-framework",children:[]},{value:"User request",id:"user-request",children:[]}],p={toc:s},u="wrapper";function g(e){let{components:r,...t}=e;return(0,a.yg)(u,(0,n.A)({},p,t,{components:r,mdxType:"MDXLayout"}),(0,a.yg)("h2",{id:"features"},"Features"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},"This chapter is a guide about integrating Http service with soul gateway."),(0,a.yg)("li",{parentName:"ul"},"Soul gateway uses divide plugin handling http request, pls enable it in soul-admin background."),(0,a.yg)("li",{parentName:"ul"},"Please start ",(0,a.yg)("inlineCode",{parentName:"li"},"soul-admin")," successfully before integrating and ",(0,a.yg)("a",{parentName:"li",href:"./soul-set-up"},"Environment Setup")," is Ok.")),(0,a.yg)("h2",{id:"configure-soul-gateway-as-http-proxy"},"Configure soul gateway as Http proxy."),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},"Add these dependencies in gateway's ",(0,a.yg)("inlineCode",{parentName:"li"},"pom.xml"),":")),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-xml"},"  \x3c!--if you use http proxy start this--\x3e\n   <dependency>\n       <groupId>org.dromara</groupId>\n       <artifactId>soul-spring-boot-starter-plugin-divide</artifactId>\n       <version>${last.version}</version>\n   </dependency>\n\n   <dependency>\n       <groupId>org.dromara</groupId>\n       <artifactId>soul-spring-boot-starter-plugin-httpclient</artifactId>\n       <version>${last.version}</version>\n   </dependency>\n")),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},"pls restart the gateway.")),(0,a.yg)("h2",{id:"http-request-via-soul-gatewayspringmvc-user"},"Http request via soul gateway\uff08springMVC user\uff09"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},"pls make sure divide plugin has enabled in ",(0,a.yg)("inlineCode",{parentName:"li"},"soul-admin")," background.")),(0,a.yg)("h5",{id:"add-soul-client-methodsavailable-for-springmvcspringboot-user"},"add Soul-Client methods\uff08available for SpringMVC,SpringBoot user\uff09"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},(0,a.yg)("inlineCode",{parentName:"p"},"SpringBoot User")),(0,a.yg)("ul",{parentName:"li"},(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"Add these dependencies in your local maven repository ",(0,a.yg)("inlineCode",{parentName:"p"},"pom.xml"),":"),(0,a.yg)("pre",{parentName:"li"},(0,a.yg)("code",{parentName:"pre",className:"language-xml"},"     <dependency>\n         <groupId>org.dromara</groupId>\n         <artifactId>soul-spring-boot-starter-client-springmvc</artifactId>\n         <version>${last.version}</version>\n     </dependency>\n"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"Backend server register center config, please look:",(0,a.yg)("a",{parentName:"p",href:"../register-center/register-center-access"},"register center access"),".  ")))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},(0,a.yg)("inlineCode",{parentName:"p"},"SpringMVC User")),(0,a.yg)("ul",{parentName:"li"},(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"Add these dependencies in your local maven repository ",(0,a.yg)("inlineCode",{parentName:"p"},"pom.xml"),": "),(0,a.yg)("pre",{parentName:"li"},(0,a.yg)("code",{parentName:"pre",className:"language-xml"},"       <dependency>\n           <groupId>org.dromara</groupId>\n           <artifactId>soul-client-springmvc</artifactId>\n           <version>${last.version}</version>\n       </dependency>\n"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"Inject these properties into your Spring beans XML file:   "),(0,a.yg)("pre",{parentName:"li"},(0,a.yg)("code",{parentName:"pre",className:"language-xml"},'    <bean id ="springMvcClientBeanPostProcessor" class ="org.dromara.soul.client.springmvc.init.SpringMvcClientBeanPostProcessor">\n         <constructor-arg  ref="soulRegisterCenterConfig"/>\n    </bean>\n    \n    <bean id="soulRegisterCenterConfig" class="org.dromara.soul.register.common.config.SoulRegisterCenterConfig;">\n         <property name="registerType" value="http"/>\n         <property name="serverList" value="http://localhost:9095"/>\n         <property name="props">\n              <map>\n                <entry key="contextPath" value="/your contextPath"/>\n                <entry key="appName" value="your server name"/>\n                <entry key="port" value="your server port"/>\n                <entry key="isFull" value="false"/>\n              </map>\n         </property>\n    </bean>\n'))))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"Add this annotation ",(0,a.yg)("inlineCode",{parentName:"p"},"@SoulSpringMvcClient")," in your ",(0,a.yg)("inlineCode",{parentName:"p"},"controller")," interface."),(0,a.yg)("ul",{parentName:"li"},(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"You can apply the annotation to class-level in a controller.the name of the path variable is prefix and '/**' will apply proxy for entire interfaces. ")),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"Example1: both ",(0,a.yg)("inlineCode",{parentName:"p"},"/test/payment")," and ",(0,a.yg)("inlineCode",{parentName:"p"},"/test/findByUserId")," will be handled by proxy service."),(0,a.yg)("pre",{parentName:"li"},(0,a.yg)("code",{parentName:"pre",className:"language-java"},'  @RestController\n  @RequestMapping("/test")\n  @SoulSpringMvcClient(path = "/test/**")\n  public class HttpTestController {\n      \n      @PostMapping("/payment")\n      public UserDTO post(@RequestBody final UserDTO userDTO) {\n          return userDTO;\n      }\n   \n      @GetMapping("/findByUserId")\n      public UserDTO findByUserId(@RequestParam("userId") final String userId) {\n          UserDTO userDTO = new UserDTO();\n          userDTO.setUserId(userId);\n          userDTO.setUserName("hello world");\n          return userDTO;\n      }      \n   }\n'))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"Example2: ",(0,a.yg)("inlineCode",{parentName:"p"},"/order/save")," will be handled by proxy service, but ",(0,a.yg)("inlineCode",{parentName:"p"},"/order/findById")," won't."),(0,a.yg)("pre",{parentName:"li"},(0,a.yg)("code",{parentName:"pre",className:"language-java"},'  @RestController\n  @RequestMapping("/order")\n  @SoulSpringMvcClient(path = "/order")\n  public class OrderController {\n  \n      @PostMapping("/save")\n      @SoulSpringMvcClient(path = "/save")\n      public OrderDTO save(@RequestBody final OrderDTO orderDTO) {\n          orderDTO.setName("hello world save order");\n          return orderDTO;\n      }\n \n      @GetMapping("/findById")\n      public OrderDTO findById(@RequestParam("id") final String id) {\n          OrderDTO orderDTO = new OrderDTO();\n          orderDTO.setId(id);\n          orderDTO.setName("hello world findById");\n          return orderDTO;\n      }\n  }\n'))))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"Kick off your project with your interface, which is integrated with soul gateway."))),(0,a.yg)("h2",{id:"configure-soul-gateway-as-an-http-proxyother-framework"},"Configure soul gateway as an Http proxy\uff08other framework\uff09"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},"first of all, enable the divide plugin in ",(0,a.yg)("inlineCode",{parentName:"li"},"soul-admin"),", then add selector and rule which will filter the request."),(0,a.yg)("li",{parentName:"ul"},"if you don't know how to configure, pls refer to ",(0,a.yg)("a",{parentName:"li",href:"../admin/selector-and-rule"},"selector guide"),"."),(0,a.yg)("li",{parentName:"ul"},"you can also develop your cutomized http-client\uff0crefer to ",(0,a.yg)("a",{parentName:"li",href:"../developer-guide/developer-soul-client"},"multi-language Http client development"),"\u3002")),(0,a.yg)("h2",{id:"user-request"},"User request"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"Send the request as before, only two points need to notice.")),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"Firstly\uff0cthe domain name that requested before in your service, now need to replace with gateway's domain name.")),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"Secondly\uff0csoul gateway needs a route prefix which comes from ",(0,a.yg)("inlineCode",{parentName:"p"},"contextPath"),", it configured during the integration with gateway, you can change it freely in divide plugin of ",(0,a.yg)("inlineCode",{parentName:"p"},"soul-admin"),", if you are familiar with it."),(0,a.yg)("ul",{parentName:"li"},(0,a.yg)("li",{parentName:"ul"},"for example, if you have an order service and it has a interface, the request url: http://localhost:8080/test/save"),(0,a.yg)("li",{parentName:"ul"},"Now need to change to:  http://localhost:9195/order/test/save"),(0,a.yg)("li",{parentName:"ul"},"We can see localhost:9195 is your gateway's ip port\uff0cdefault port number is 9195 \uff0c/order is your contextPath which you configured with gateway."),(0,a.yg)("li",{parentName:"ul"},"other parameters doesn't change in request method."),(0,a.yg)("li",{parentName:"ul"},"Any questions, pls join the group and we can talk about it."))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"Then you can visit, very easy and simple."))))}g.isMDXComponent=!0}}]);